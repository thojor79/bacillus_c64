ToDo - in categories
============================

BUGS
====


VISUAL GLITCHES
===============

blend_in: sprites delay raster irq most probably and give visual glitch, but
not critical. maybe just disable scorepanel by setting fgcol to all
black then


GAMEPLAY EXTENSIONS
===================

some simple tune or at least sound effects would be cool,
maybe one voice for effects, two for tune.
effects like explosion/gun can easily be done for killing enemy or
collecting boni. however playing sfx needs some code of a sidplayer
that is run every frame and this is not simple. maybe it is sufficient to
set up an instrument and play it for a certain amount of time, maybe it
needs more work. a music player then needs to keep one channel free.


GENERAL FEATURES
================

implement blend out effect for level end - reverse reading of blend in,
rather easy to do but time consuming and low effect

Maybe change background color in intro screen per line for an effect or use
tech tech to wobble image. Maybe also for outtro text.

Maybe show monster sprites in title screen at the sides.

Implement 6 levels, 2 per world.



INFO
====

Intro data goes beyond $B200, and is overwritten by level unpacking.

Background tiles with parallax scrolling need to be hires. If they would be
multicolor, the scroll code would rotate bits, not bit pairs, so colors
would oscillate.

in interrupts don't save Y register if we don't change it - only in
scoreline irq, and not really critical there

traps are checked directly for player pos, so player can jump on a platform
where traps are on and is not killed as long as he is far enough to
left/right from the trap. Thats kind of a bug, but it doesnt matter for most
game situations, so we dont care.

NOTE that changing charset after display of level tile data would be good,
so tiles could use all 256 chars, optimally use last charset and last 20
characters of it (charset at $F800), except last char (where IRQ vectors
are), so only 168 bytes are lost for sprite data. However changing the
VICMEMCTRL register in time (needs a bad line) doesn't work stable and
blend_in sprites further complicates it, so sacrifice 20 characters of tile
charset for now.
With later games we can use a bigger score panel and more raster lines for
transition so we can do that more easily.

Maybe animated boni tiles in hires with white border and white logo like
rotating molecule or jumping water drop, better than what we have now.
No, it doesn't look good.

Scrolling is NOT done in the raster irq, but in main CPU code when bottom of
screen is reached (raster line 251). We also shift color RAM then, which is
the most critical part for timing.
It takes at least 147 raster lines (150 lines ~ 9000cyc with badlines, so
~9cyc per byte to copy, that is rather fast)


Ideas for later
===============

Add flying actors that drop other actors that just fall down like bombs or
stones etc. Would make the game much more interesting!
This would maybe need the sprite multiplexer.
The falling actors should not get stored back to map!

Many illegal opcodes of the C64 are very handy. Use them more in the code.

Many checks like collisions between player and enemy doesn't need to be done
every frame with 50fps, every 2nd or 4th frame is ok. For more than 7
enemies with sprite multiplexer this will be necessary as time is not enough
to do it every frame.

Maybe boni could be flying and modeled as sprites with use of the sprite
multiplexer. Maybe even traps. But we would need to make them single colored
then or all sprites multicolored (rather that because player is multicolor).
Don't do that with bacillus but rather a new game.

Reorder trap animations and use them in forward order as originally
intended.

the animation of the background tile should be level dependant
easier to do it with separate data or separate code.
generation of animation could be done at runtime, as it is now.

implement more actor behaviors
Behaviour: follow player, flying pattern, flying homing
maybe use only 8 enemies with 1 bit to control behaviour - would reduce
sprite data as well - but also ok to use 16 as it is now

secret passages or rooms in levels - not for this game

player can shoot - not for this game

animate boni tiles

use spare sprites with actor numbers >= 16 as boni or traps.

boss monster - only sensible when player can shoot - not for this game

jump from below to walls for boni - not for this game

if we have only 64 tiles and 8 background tiles as now we can use 24 actor
types, not 16, by using bit6|bit7 as flag of actor! But 16 is enough for
now.

Create or rip some sound effects or music, maybe even try GoatTracker would
be cool. But composing would give most probably poor results due to lack of
experience with high effort. Ripping would be easier.

image converter could change hue of colors of whole image and also
brightness etc to give better results? but rarely needed...

Killed enemy sprite could change to a sprite showing the score that was
added for the kill and the score raises for 1-2 seconds above the enemy
position...

music and sfx is important! play 1-3 sfx or play music in a level. play an
existing SID file would be simplest solution, however we can't distribute it
because of rights? or are they free?

implement part of image converter with rle encoding (for logo in upper part
of screen only!)

multicolor extra colors can be changed in certain lines with rasterirq, to
bring more colors, but not easy to manage (the game creatures does it that
way)


Ideas for other games / projects
================================

8-way scrolling and sprite multiplexer would be cool, that way one can
create a Turrican like game. Also shots as characters are needed then, do
the shots check if an enemy is over them or does every enemy check all
characters below it?

Ultimate coding would be 8way scrolling 50fps maybe with some background
parallax scrolling and also sprite multiplexer (24 sprites or so) and maybe
sound playing. Only possible with interleaved AI/physics.

It seems that 8way scrolling with color ram, sprite mux and music overloads
cpu ressources. Turrican3 has it all but sometimes has slowdown and
flickering of score panel. This is just too much.

Levels 256 tiles wide with 2x2 tiles seem ok, larger levels would eat up to
20k of RAM but that would be ok (80 lines of tiles, for a screen with 20x10
tiles giving 12.5x8 screens per level - 100 screens). We would need a
loading routine then to load level data. This means no kernal and also fast
load routine.

Plan would be to have 20 lines of level display, one black line and 4 lines
of score panel. Boni would be sprites. First step would be to have vertical
scrolling, then vertical and horizontal scrolling, then integrate the sprite
muxer and have screen split with score panel. That way we can use all 256
characters for level data. Next step would be loading for more levels and
later then sprite bullets in case of shoot'em'up game.

Alternativly we could implement char bullets first and still have the 2way
or 1way scroller with sprite muxer. We can implement a simple shooter with
fix scrolling, sprite muxer and maybe char bullets then, some space shooter
like Katakis. Would be rather easy. If score display is done in bottom
border with border open we could even use full 25 lines. But that is not
necessary.

But it would all be just a repeating of existing stuff. And walking around
and exploring levels that I have created myself is not big fun.

However randomly or procedurally generated content would be cool. Like a RPG
game with huge world map (256x256 maybe) so that the C64 can generate the
data on the fly. Would also be more interesting to play in unknown data.
Could be done for jump and runs or shoot em ups as well but much harder to
have playable and funny levels that way.

Creating good graphics isn't easy, converters are not smart enough. So
writing adventure games isn't that easy and it will take much space to use
multicolor graphics. Without scrolling we can store multicolor tiles and
build up a screen with them to have more colors. It will take much more ram
though. But would be an alternative. Designing graphics is hard, making the
simple levels of bacillus is no fun, if we could generate levels in 2d as
well like turrican it may be better. However content creation is not that
fun for programmers, so automatic generation is a possible alternative.

Space for multicolor tiles: 2x2 tiles are 4*8 bytes pixel data and 2*4 bytes
color data = 40 bytes per tile. With 4x4 tiles it is 160 bytes per tile. How
many tiles could we store? Up to 256 are possible, using 10k or 40k of
memory. Level data would take 200 bytes per screen or 50. For a large level
with 100 screens this would be 20k or 5k. Together 30k or 45k of ram, if
there are no meta tiles. 30k seems doable, but 45k is too limited, we need
space to render to and sprites etc. 17k roughly are used for that, what
would leave 17k or 2k for code. 17k seems doable, but not 2k.
So we could create a game multicolor room based with 100 rooms. With many
different tiles for walls we could create some dungeon master like game.
Various types of wall bricks and decorations, traps, gates, doors etc would
fit in memory. Generate appearance of screen by general locality and
position dependent pseudo randomness. It would be easy to fit a large
labyrinth into memory. we don't need to use tiles for this but just various
parts of graphics that are combined. if labyrinth shape, monsters and goods
are distributed randomly it will be a bit like nethack. rooms will need to
get generated as well.

what can easily be done with c64fy is conversion if line drawings to c64
pictures like the turrican2 intro.

How can we make use of modern computers and computing power for c64 games?
creating graphics and converting them or finding formulas for content
generation is a possibility. Here is another idea.
Use multicolor graphics mode for a game. Place all graphics in RAM, so no
need to load them. Construct screen of several layers of graphics, e.g.
three layers with fix distances. For every layer have N different graphics
that can be placed at fix positions, that means char blocks. Have e.g.
foreground layer with 12x8 sized graphics (blocks) and medium layer with 9x6
and distant layer with 6x4 or so. Store images in ram and compose screen by
them. Have e.g. background color blue and black/grey/brown with raster irq
to switch at same height. Clouds could be sprites moving behind pixels, in
sky there are no enemies, so can reuse sprites. have e.g. also sun as
sprite. Use 90° turns and discrete steps. Have pseudo random generated
256x256 map that tells per position wether road,gras,bush,tree,rock,house
etc. then take the nearest 5x5 fields or some cone-like area to render the
current screen. So we can store huge map in ram and huge world to explore.
rendering is done with cool trick: every subimage of NxM blocks consists of
pixel data and colors. it is rendered at any block of the screen. The
background color is not written, only the three other colors. Render each
block. If its colors are equal to that already on screen, just copy it. If
colors are all existent, but different order, swap bit data. If three new
colors are partly or fully not existing, have some computation, count for
every existing color how many pixels are there and for the new colors as
well. Use the three colors with highest count. replace other colors by
possible mix of the three colors. Maybe better to not keep the three most
used if two of them are similar, but rather keep one different color or so,
to minimize total error. Here some testing and research needs to be done.
Similar to c64fy. Have the graphics either packed by exomizer or even better
idea: place all of them in a large image and run c64fy to generate 512, 1024
or even 2048 characters. Then for every block of a subimage have 3 bytes, 2
with char index and one color, 1 byte with two other colors. so only 3 byte
per block. that way we can compress graphics well.
we need 16k for screen and sprites, code size will certainly be also minimum
16k, so at max 32k for graphics. With 1024 chars it would take 8k for pixel
data and we could store roughly 2730 blocks. That would be 10-12 subimages
per layer. 3 trees, 2 plants, 2 road, 1 bush, 1 rock, ... maybe some house
data as well. Maybe mountains below clouds also as sprites. Have upper part
of screen for display, 40 blocks wide, at most 20 blocks high.
E.g. first layer 5 subimages of 10x8 or 12x8 blocks. second layer 4 blocks
upwards with 8x6 size (2+6*6+2), third layer 3 blocks upwards with 8x5 size,
as example. depends if it works to pack that many graphics in 1024 chars.
Rendering isn't time critical and would work fast enough. would be very cool
result and we can use converter and generator to pack all graphics into 64k.
Problem is as with most graphics, just converting doesn't help much, one
needs rather some direct drawing, or rework the converted graphics with hand
pixel drawing. And this means many graphics need to be drawn just to test
wether the idea would give convincing results. It is a great idea and will
certainly work but how good the graphics will be is uncertain. The question
is also if the screens would differ enough from each other to make the game
playable. E.g. if player walks through a forest, many screens could look the
same. Maybe don't store full trees but vertical layers of leaves, a set of
trunks etc. and combine it. Pine trees can have various vertical layers of
needle leaves.

Rendering: store rectangular images of block size (multiples of 4x8 pixels,
so 8 bytes per block plus 2 bytes color).
Only render to full blocks, so positioning x/y only at multiple of 4/8
pixels. Image has one neutral color optionally. So either copy blocks fully
or mask them out and blend them in:
a bitmap byte has 4 pixels with 2 bit each. To generate the mask for the
byte do:
a = byte & 10101010
b = byte & 01010101
m = (a >> 1) | (b << 1) | byte
so mask has 1 bits where image data is.
screen-byte & ~m | (byte & m)
to compute blending in.
But only if the 3 colors of the image block already exist in screen block.
If not, count screen block colors and buffer colors, as first convert screen
block to 4*8 bytes with a color index per byte. Then copy image block with
masking to the scratch buffer. As best place the 32 byte scratch buffer in
zero page. Then count for all 16 colors that are not background color how
often they are used. The 3 most used colors will be the new block colors.
Replace other colors by one of the 3 new with least error. Have a 16x16
error matrix table in memory. Error is 0...255. Replace every color by least
bad alternative. Then convert scratch buffer back to screen block.
What will it cost? For every pixel there are surly ~20 cycles for
conversion, copy from and to screen and from image takes 60 cycles per
pixel, counting error and checking and replacing color say 20 more cycles
per pixel, so 80*32=2560 cycles per block. As a very rough guess. That would
take 50 raster lines per block. That would be 2.6ms per block. For full
screen with large area of 20x10 blocks that would be 500ms or 0.5seconds to
fill the screen but that would rather be fast - if we don't have overdraw.
However we certainly have factor 2 to 3 with overdraw so 1.0-1.5 seconds to
render a screen, what would be still good.
Advantage: every operation is rather simple.
The idea can be tested with a simple python program first! so if the screens
don't look good we can stop it, otherwise implement the concept.
We would need many graphics of tree trunks and leaves etc.
Overdraw could be much larger. Preparing images in gimp would be rather
easy. Rendering brick walls could be simple by placing repeatable pattern in
multiple of blocks.

We should reuse blocks and compose tile images out of blocks. E.g. roads
with curves are in the inner corner similar to T-junction roads or
crossings, so we can reuse the inner corner blocks. Use different floor
patterns (stone, bricks, mud, sand) with overlay images for landscape types
(grass, swamp, stone, mud). Every image for a tile is stored in vertical
runs that reference block numbers. Every block is 10 bytes (8 bitmap, 2
color and use free bits to signal that block is fully opaque). Maybe
sometimes it even helps to reuse the bitmap data but that would maybe cost
too much space for indirect information. However with 10 bytes we could
store > 2048 blocks, so use 12 bits for block number. Maybe 11 would be
enough, but if we could use that bit is uncertain. Maybe we can store images
as runs not of block numbers but runs of color data and block number. We
need 12 bits for color information, as every block has maximum three colors.
It could have four if opaque, but that would only work if one of the colors
is like background color. Maybe only 3 colors is too limiting. However with
a bit for opaque flag and 3 colors and 11bit block number we would have
24bits in the image for every block reference and 8 bytes per block. That
way we can reuse the bitmap data. We would put all images in one png and let
c64fy compose a charset of 2048 characters of the data. However the opacity
is more a feature of the bitmap data? Or can we have 4 colors for a block
when opaque? That would be 16bit, 12bit block number and one opaque flag
bit, hence 29bits.
We don't know if reusing the bitmap data saves more space than the extra
space for colors cost but that should be the case.
Every tile is 8 char blocks wide and 7 char blocks high and tile images are
up to 14 char blocks high. Certainly not all blocks are used. 

...xx......oo...
..xxxx....oooo..
.xxxxxx..oooooo.
xxxxxxxxoooooooo
.xxxxxx..oooooo.
..xxxx....oooo..
...xx......oo..

Column heights for the 8 colums are then up to:
8,10,12,14,14,12,10,8. Sum is 88.
No!!! It is 9,11,13,15,15,13,11,9->96 not 88, or 10% more! All calculations
below are 10% off then!
So at most 88 32bit values -> 364 bytes for one tile image and 88*8=704
bytes for the bitmap data. At max 1068 bytes for a full tile image, so we
would have space for roughly 30 full tile images, that is not much!
However most tile images are not complete and we have the block reuse.
Filled floor tiles are 8+2*6+2*4+2*2=32 char blocks, hence at max 32*4+32*8=
128+256=384 bytes. And we certainly will have block reuse then.

For the landscape it would be good to create a 16x16 or 32x32 byte world map
that has 1 byte per cell with bits signalling if there is road/water and
what type of terrain. Each cell is then extracted to 16x16 or 8x8 real data
cells, where we store 32x32 real data cells for a local part of the world
map. Real data is extrapolated from world data and some position based
randomness. World data is true random, maybe generate paths by the recursive
dungeon creation algorithm (not recursivly implemented though).
That way roads are not straight but with some pattern like moving the road
position to +/- 3 real cells on the border between the 8x8 sized read world
data tiles. We have then always a 32x32 buffer (1k) with real world data and
wrap around access. For rendering 5 tiles are seen horizontally with 4+2
interleaved, so 11 tiles wide and 3+2+2=7 tiles high. So we can move around
without the need to recreate real data. We can move around 4*2 or nearly 4*3
screens without the need to recreate real data.

So we could start with the dungeon crawl algorithm to create a net of roads
and also rivers (only few rivers, 1/2 or 1/4 resolution) and distribute
country types by random sample.

Then we need some world to real data extrapolation and the real data needs
to define how the tiles look. However with roads in all directions there are
2+4+4+1=11 different road directions, different type of trees, decorations,
floor types etc. so it is very difficult to pack it all in 8 bits. Maybe
have 5 different types of floor w/o road, so 4bit for road data, maybe 2
types of river crossing road, so 3 types of non-road. Then we would have 4
bits for landscape type and type of decoration. With 4 landscape types this
leaves only 4 types of decoration like trees and we have no rivers coded. If
we store per real data cell only that there is a road and/or water and
landscape type and decoration type then it will work better. Use 1 bit for
road, 1 bit for water, 2 bits for landscape type and 4 for decoration number
so we can chose road background by deco number or tree type by deco number
etc. and create matching tile images by combinations of the 4 surrounding
cells and this cell. We could for example place animals and fences etc. And
we can position trees or decorations with a +/- 1 position variation inside
the tile so it is more flexible.
However this doesn't make it easy to gather all data what images to render
for a tile. We have one floor type, one floor decoration, 0-2 decorations on
top (like tree composed of two parts, trunk and leaves - or animals and
fences). So this would be up to 4 images per tile. The decoration images
could be taller than one tile, so they overlap other tiles. Decorations
could be high grass and plants as well. So two images overlap tiles to the
left/right/top.
This means for one char block on a tile we have 2 blocks for the floor and 3
sources of tile data with 2 blocks each so up to 2+3*2=8 image blocks to
combine for one screen block.
Because position can vary and all the checks it will take rather hundreds of
cycles to prepare data. We need to read up to 5 real data cells and prepare
lists of blocks for every tile (can do this once for rendering). So lets say
it is 500 cycles per tile with 77 tiles so it is 33kcycles for preparation
and converting a block to 32 pixels is surely say 200 cycles per block. So
we have 40*20 blocks and 5 time overdraw so it is 200*800*5=800000 cycles
total to create the blocks and surely more time to render the data. But that
is still less than one second! That would be super fast.
With all that technique we will have 256x256 tiles to render with 11x7 on
screen giving nearly 1000 visible screens without loading!
It takes 1k of world data and 1k of real data cache and surely
77*5*4=1540bytes of preparation data, so 3.5kb gone, 16k gone for
bitmap/screen/sprites, which doesn't leave much space for code and data. We
have 112 sprites free roughly and if the player is facing 4 directions with
3 animation phases each and 2 sprites it takes 24 sprites for the player
alone. That is space only for 4-5 characters. So we have to copy the
monsters visible on screen to the vic bank memory and need space for them as
well. A cartridge would be very helpful here. If every monster could turn
and move as well, maybe not with animations but 4 directions and 2x2 sprites
it is 16 sprites per monster or 1k of data. With only 8 different monsters
(not much for that huge world!) that would be 8k of sprite data. So we have
47.5kb free and 3.5kb gone for preparation, so 44kb for code and data! Even
if we can do that in 16kb of code, this leaves space for 28k of data - that
would be 8 monsters and only 20k for landscape blocks - this is really few
space. Let's assume we can reuse 1/3 of the blocks and let's also assume
mean tile image has ~ 32 char blocks filled (full tile bottom or
decorations - maybe less) then we need 32*4+32*8*2/3=128+85=213 bytes per
image tile (not counted run encoding!) and we have 20kb = 20480 bytes then
we can store 96 tile images maximum.
This means 2+4+4+1+2 for roads/bridge, 2+4+4 for rivers, 8 tree trunks, 8
tree leaves, 4*2 floor types for all landscapes, 2 animals, 2 fences, 2
types of floor decoration per landscape (*4), we have already:
13+10+8+8+8+2+2+8=59.
And there are no cities/houses yet - so far we don't have them in this
concept. So this game would be just walking around, smashing monsters and
collecting goods.
However with NPCs and quests it would take more ram to hold texts and data
about started quests etc. etc. But there is no space for it. Monsters are
somehow placed also randomly, shouldn't we have some final place at opposite
end of map with very strong monsters and some final goal / treasure?
A stripped down version of all this would be just some dungeon crawler game
with less variation of graphics and then maybe more plots/quests but still
random.
However there are some questions:
would this all work? If we need to paint all graphics first to test it that
would be waste of time. Uncertain how good such a screen would look and how
fast block composing is (we can try it in gimp but need some graphics
first!)
Would such a game be enough fun? It is a simple hack and slay game with
superb graphics but no suprises and not much tension. And we need all the
code for map generation etc. Trying the map generator would also be possible
but maybe first in python to see how it would look.
We also need some translation table how the 5 cell types generate the up to
4 images per tile.
Can it work to have opaque blocks with 4 colors? Would work only if
background color is part of that block and block is opaque but all blocks
must be opaque then to make it work! This can only happen for floor data
(lowest layer of data) and there it doesn't make sense to store 4 colors as
the fourth color is always background color.
What background color to use? medium grey? green? brown?
So we have at most 3 colors per block and maybe opaque bit. So 12+1+11 bits
or 3 byte per block, not 4. How do we encode per tile image what blocks are
used? A bitmask with 88 bits? decorations always 2 char blocks taller and
smaller? Won't work for fences and animals. Rather use from top number of
empty blocks and then number of filled (14/14 max), so one byte per column.
If there are empty blocks in between use block number 0 for totally
transparent block.
Do we need opaque flag? Opaque blocks can only be directly copied for lowest
floor layer. For decorations we still need a conversion? No. We could
rearrange opaque blocks so blocknumbers 0-x are halftransparent and x+1-max
are opaque so we can use 12bits for block number - no! Block numbers
reference to bitmap data only, so we need an opaque bit here. But with
11bits of block numbers we can have 2048 bitmap blocks of 8 bytes giving
16kb of bitmap data - more we can't store in memory either.
So we could try to paint some tiles in gimp and combine them to test how it
would look like.
Hmm seems we can't handle 95 images but rather 85-86, but it seems we have
enough space.
It also doesn't look isometric but just diagonal!
What happens if player or monster walks behind a tree is not defined. We
could just forbid tiles with large decorations below roads.
How can we make it look more isometric?
The last ninja has roads with 4:1 diagonal factor, even 2:1 would look
better, and here we have 1:1.
Oh shit, the whole idea is doomed or can we have tiles with 2:1 or even 4:1
shape?!
2:1 Shape would be double width each?

With 1:1 we have 8x7 size

2:1 - 10x5 size
....xx....
..xxxxxx..
xxxxxxxxxx
..xxxxxx..
....xx....

The shape doesn't fit!

Or 14x7 size...

4:1 - 20x5 size difficult to have trees with such tiles.
........xxxx
....xxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxx
....xxxxxxxxxxxx
........xxxx

or 28x7 size - far too much.

The shape doesn't fit!

We need to double the middle row to make it work!
So 10x6 or 20x6 size. 20x6 is too big.
How would it look like with 10x6?

Seems ok, shape is

....xx....
..xxxxxx..
xxxxxxxxxx
xxxxxxxxxx
..xxxxxx..
....xx....

And shapes stack on top of each other. So its 3.333 shapes vertically
and 4 horizontally (4+3+2=9, 3+2+2=7).

Looks different than last ninja but still ok.
Seems ok for roads - so the idea still works.

Better store colors together with bitmap data, reusing only the bitmap data
should be a very rare occasion. So have 10 bytes per block, use 1 spare bit
for opaque marker.
For tile images have two bytes header that encode offset and size in x/y
directory with 4bit each.
Per column have a list of two byte values encoding 11bits block number, 1
bit repeat/ascend flag and 4 bit counter that tells how many blocks follow.
With repeat flag same block is repeated, with ascend flag we signal that N
blocks follow with ascending numbers. Normally we expect numbers to ascend,
so this gives good compression. Every column then has 1-12 twobyte pairs.
We need to know where each column starts. Either code that in the column or
with some offset value per column. We can have 2-24 bytes per column, 10
columns, so 20-240 bytes, so one byte index is enough. Store that after
header.
So tile image is 2 + N + N * M bytes with 2<=M<=24 and 1<=N<=10.
Data size is then 2+1+1*2=5 to 2+10+10*24=252. So tile image is 5...252
bytes. If we assume 128 bytes mean and have 8k for them we can store 64 tile
images referring to 2048 blocks. That would be 28k for bitmap/tile data.
2048 blocks are just two full screens of different blocks. Hopefully we can
store tile images with less than 128 bytes that way we can have maybe 96 or
128 tile images.

Problem is all graphic works is wasted if the world generation doesn't look
good. And all of that code is wasted if the graphics don't look good enough
or the compression doesn't work.
Maybe paint some road tiles first and some trees and try it out how it would
look like and if it is good code the world stuff...

If we would have 1 bit free per block in the tile image data we could
reference a block and with horizontal mirror flag. There may be some blocks
that can be reused mirrored...

Realistic graphics like trees don't look to good, on green grass trees with
green leaves don't look good, so trees need a black outline or only light
green leaves - but that's not enough colors. Or forest floor needs to be
brown but tree trunks are already brown - we need outlines in black here
anyway.
However last ninja looked rather realistic and not comic. So it should be
possible.
Use also cyan and yellow for trees. Lawn was light green and leaves dark
green there. Last ninja two has dark green lawn and also shadows for trees.
Sometimes cherry trees with white blossoms.
In last ninja 3 the trees look well, leaves with green, cyan, dark gray, a
bit black and the trunks orange, brown and partly black, also a bit light
red at some spots.
Rather realistic works.
However trees need at least an darker outline to the right and top so they
don't blend into the background.

Tiles below road must not allow trees but rather bushes, so tile images are
not higher than tile or at least only one char block or so.

Landscape with rock walls would be cool, so player walks through canyons.
Tile images are always two tiles high and we have inside/outside corners for
all 4 directions, 2 tile images for left/right straight wall and one for
filled top. Maybe have slightly varying height of border at top inside tile.

Use sprites for on screen animations. Sparkling/flowing water, waving grass.

Dense forest won't work rather have a bit more variation in positioning
trees and also leave some tiles empty sometimes.

First rough tests in GIMP seem to prove that the idea would work. But it
highly depends on the quality of the graphics.

When rendering trees variate their position +/- 1 row/column inside the tile
depending on their position.

The map is 256x256 in coordinates (tiles) but where x and y goes? y goes
left/down and x right/down.

World data is what? where roads and water and and kind of terrain. If we
have 4 types of terrain (forest, bushland, swamp, rocks) we have 2 bits for
terrain. We could encode road with 4 bits (or 12 values of there are no dead
ends) and have 2 bits left for water (or maybe 5 different values, because
5*12 is 60, and we can encode 64 values). 4 values for water could be: none,
crossing n/s or w/e but not enough space for directions. For road and water
we have only sharp curves then. Maybe we need more bits like monster density
or treasure probability. Maybe hold 2 maps of 16x16 for this, still takes
only half the memory than 32x32. And road directions can be stored in one
cell, doesn't need to look at neighboring cells.
So first part is to encode dungeon crawl w/o recursion in 16x16 block.
We could use the CBM characters for directions.

The algorithm for dungeon crawl works but needs good randomization for every
decision and it may generate long straight paths. Even if we variate the
terrain type every 16 real tiles a straight path of 4-6 world cells will
result in a straight path of 64-96 tiles that is 10-12 screens of straight
path with only minor variation of terrain. Not ideal.
And if we don't try directions randomly but try remember last direction and
trying one of the side directions first and then straight path? we need to
store not only next position but also last direction then. Also not ideal,
try also straight direction but with less probability rather.
Can we later also stray in random connections? But this can give short
circles that are bad.
If we subdivide the field of 16x16 in 4 squares of 8x8 and have one
connection between every square and the neighbor and then again subdivide to
4x4 and 2x2 would that work?
Have 15x15 fields and on cross shaped border with x or y = 8 mark on even
positions one of them in every 4 parts of the cross. Again for next smaller
cross (remain 7x7 with cross at x/y=4 and 3x3 with cross at x/y=1). No,
don't mark for crosses in 3x3. Doesn't work all too well.
Or like cities are: Have 3x3 or 5x5 spaced fields with one city randomly
positioned in that area. then connect every city to 2-8 neighboring cities.
Gives a rather regular map but with well sized circles and variation.
If the pathes between cities are varied a bit (perturbation, shifting) it
will work well. e.g. we can move the cell that the road goes over along the
border of the cell! Gives a good perturbation of road. This means: a city is
anywhere in the 3x3 or 5x5 area and is connected to all 4 borders of the
cell. Corner tiles of the cell must not be used twice. This is more
difficult, rather use 5x5 cells and don't use the corners or 3x3 and some
special checks or so. 16x16 worls gives space for 5x5 cells of 3x3 size
giving 25 knots.




SID Composing
=============

as first collect instruments from other tunes, this seems difficult to write
own instruments.
understand/learn what filter and pulse tables are.
maybe easier to get some notes and write them, free composing is very
difficult, music sounds ok, but rather mechanical.
