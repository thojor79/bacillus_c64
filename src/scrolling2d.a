; Bacillus_c64
; Copyright (C) 2016-2019  Thorsten Jordan.
; 
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

; ***************************************************************************************
;
; all code related to 2D scrolling (8 directions)
;
; ***************************************************************************************

; Two dimensional scrolling on C64 is implemented with these features:
; - Hardware scrolling works for up to 7 pixels in all directions
; - Then we need to copy the screen and color ram by one char to any direction
; - Double buffering can and should be used for screen data
; - Color ram must be copied in-place and synchronized with raster
; - It takes about half the raster time of a frame to copy the whole screen
;   So we can scroll a char every two frames (need screen and color ram copy and spare time)
; - This means scroll speed is 1, 2 or 4 pixels per frame. 1 is too slow, mostly 2 or 4.
; - Scrolling is always done from fix position in char to next fix position, so always
;   multiple frames at once!
; - Neutral position is with hardware register position in center of char, so we have time
;   to prepare next position
; - Thus the scroll directions must defined by char offsets, hence 8 directions possible!
;
; Note that we could also keep two backbuffers for color that we can prepare in advance,
; but that doesn't make the code faster or easier.
;
; The code related to scrolling is rather simple then:
; We need to memorize if we are scrolling and in what direction.
; Then we need to store the scrolling phase and a global position that is updated and
; can be requested by the level data / tile renderer.
; From outside the next scroll direction is given and also scroll speed.
; Beside managing that data and the hardware registers the code needs to copy screen
; and color ram data at the right time.
; When moving the color ram data during display we have to check where the raster line is
; and copy either the upper or lower part of the color ram accordingly.
; Copying:
; Fastest copying would be a direct LDA/STA pair with maximum unrolling but this takes too
; much ram for code. We need 3 variants: copy screen 0 to screen 1 and vice versa and copying
; in the color ram. And we need the code for all 8 directions.
; So we use a loop that iterates over columns and is unrolled for lines. This is still very
; fast (9 cycles per byte where 8 cycles at least needed for fastest direct copy), but is
; acceptable for code space. It takes 21 LDA,x/STA,x pairs plus 4-5 byte overhead for each
; copy routine and we need 3*8 instances: (21*6+5)*3*8 = ~3kb, a lot of code.
; We can cut that down by modifying the address highbytes in the copy code and using only
; the 8 instances for 8 directions. Modification is 42 STA and 2 LDA, because source
; and destination highbytes must be set, so we have:
; (20*6+5+42*3+2*3)*8 = ~2kb. Preparing the addresses takes 42*4+4*2=176 cycles about 3 RL
; per frame, which is ok. So we can trade 1kb of code for 3 RL, but directly having all
; instances unrolled can be easier. Switching screen addresses would be easier with the
; preparation code though. We can load source/destination addresses by scroll offset
; and don't need to handle twice the jump tables.
; But when preparing the source/dest addresses we need to switch pages after some lines
; and this also depends on the offset and the first offset can be -1, so this is all
; very clumsy - it is better to fully unroll the copy code.
; Check which part of code to use in every of the 2*8 functions? If the flag is
; already in x or y we need a cpx/cpy and bne each, so 5 bytes extra: 5*2*8=80 bytes.
; If we have a separate jump table and functions for these then we need 2*8 functions
; with one rts and one jmptable entry each: 2*8*(2+1)=48. So use separate tables.
; It will cost some more bytes because of the extra jsr/jmp calls but we need to generate
; new screen data anyway to the next visible screen - so we need to handle it anyway,
; another aspect why full unrolling is more flexible.
; We could even go further and modify also the lower bytes of read/write addresses
; but this takes too much time. As we use only the X register for offset we could also
; use Y (at the price of one INY/DEY each column) and we can handly +/- one line offsets
; with the same code. But scrolling updwards needs special code where we store one line
; temporarily and scrolling right needs increment of offset where left/up/down can use
; slightly faster decrement (zero check is faster than CPX/CPY).
; Using X/Y for line offsets will make the code even shorter but much more complex in
; development. This would save maybe another 0.5-1kb of memory and should be done only
; if the memory is short. For now it is best to implement the full unrolled version.
; We need to have a version for screen0 to 1 and vice versa, one for upper part and
; one for lower part. Sometimes 10+11 lines were copied, sometimes 10+10,
; so we need to jump into the code a bit later (skip one line) and adjust x/y before.
; It takes 10 cycles per byte instead of 9.5, so ~7RL more.
; The code to manage scrolling should be called when raster reaches bottom of screen,
; however when sprite muxing is done there and taking away most of the time until screen
; start this is too late. We need to start colorram copy of the upper half when raster
; has done drawing the upper half. So we need to call it after 10-11 lines and at end
; of visible area (21 lines, before score panel).
; Then we can copy the parts of the screen that were just rendered.
;
; Note on how the hardware register control works:
; Register position 0 means we see all of the chars, so screen and color data must
; be correct and match. Other values mean that the first row/col is partly invisible
; and the last row/col is partly visible.
; The color ram must be correct when hardware register reaches 0. We set the hardware
; register at the bottom of the screen (write to some memory so it is set correctly
; after score panel - this means we need an irq sometimes after the score panel).
; So when the register will be set to 0 at bottom we need to prepare parts of the
; screen or already have them prepared. Color ram upper half (lines 0-9) must have
; been already copied when they were drawn, so we need to copy the lower part
; (lines 10-20) then. This is done when the current register has the value before 0!
; And one frame before we need to prepare the screen.
; This means with scroll speed of 4 pixels there are some pitfalls: since we need
; to prepare the screen when register will be 4 as next and neutral position is 4,
; we need to delay scroll start one frame when not scrolling. And we need to prepare
; next screen after we reached neutral position 4 if scrolling continues.
; This is a bit more complex. With scroll speed of 2 pixels this is simpler.
; Hardware registers go 4->6->0->2->4. So we have more frames to decide what to do
; next. Note scrolling in opposite direction is 4->2->0->6->4 so 2/6 in the tables
; below must be adjusted to situation.
;
; 4 pixel scroll speed
; Hardware scroll    Where         Do what
; 4                  mid screen    copy upper color part when scrolling is active
; 4                  end screen    copy lower color part when scrolling is active
; 0                  mid screen    copy upper screen part to backbuffer if scrolling is active
; 0                  end screen    copy lower screen part to backbuffer if scrolling is active
;
; 2 pixel scroll speed
; Hardware scroll    Where         Do what
; 4                  mid screen    copy upper screen part to backbuffer if scrolling is active
; 4                  end screen    copy lower screen part to backbuffer if scrolling is active
; 6                  mid screen    copy upper color part when scrolling is active
; 6                  end screen    copy lower color part when scrolling is active
; 0                  mid screen    nothing
; 0                  end screen    nothing
; 2                  mid screen    nothing
; 2                  end screen    nothing
;
; With 4 pixel/frame speed it means that on scroll start we have to delay it one frame anyway.
; And on scroll end we either need to continue preparing the next screen in scroll direction
; or do nothing, depending on scroll speed.
; Maybe we should give the scroll code a screen position to scroll to, so it can decide
; on its own when scrolling starts or stops, and what direction to use.
; It could even adjust the scroll speed depending on difference.
; But that is also not trivial.
;
; Note that screen has 38 visible chars in width and the 39th partially. So we need
; to have only 39 chars prepared. So we can ignore the last column!
;
; Note that all right scrolling directions need forward copy for color ram,
; and all upward scrolling need one temporary line to save data to (slower)
; but we can't scroll the whole color ram at once, so we need to store line 9
; to a buffer and then shift 0-8 one down. Later shift 10-20 down and copy
; buffer to line 10 then.
; So use directions 0-7 for left/upwards, upwards, right/upwards, right and so on.
; Directions 0-2 need temporary buffer, 2-4 need forward move. Copy from/to buffer
; can always be done backwards (DEX/DEY). Rather use 1-8 to signal 0 as no scroll.
;
; Sprite muxer irq that is called for score panel could set up the score panel,
; then do sprite mux data, reset screen data and then ack irq and then call this scrolling code...

; fixme: is_scroll_active remove that from main program. same for screen_pos_x.

; fixme only to the plain scrolling here and call fill_new_first_row etc. functions here
; that are implemented in tile rendering!
; do tile rendering in other file!

; These macros used below copy screen parts line based. There are several advantages: when scrolling this only copies
; bytes that are kept, remaining columns can be filled up easily. It is very easy to write and to use, better than
; approaches that use some power of two as loop counter. Code is rather short (~100 bytes for half screen).
; And it uses partial loop unrolling, taking ((4+5)*12+7)*39 = 4485 cycles per half screen (71.2 raster lines),
; Which is pretty fast (9.6 cycles/byte, optimum with maximal unrolling only 8 cycles/byte!).
; Final advantage: there are no overlaps and no bytes to save/restore.
; And the same macro can be used for color ram shifting as well!
; It takes ~80 raster lines (with bad lines ~58 cycles per rasterline medium, so seems ok)
; Full screen is 312 raster lines, so it takes ~ half raster time to copy, seems fair.

; Note! For parallax scrolling we need to counter-rotate some chars and we need to do that
; for all 8 directions! Data is rotated over several characters. This can be done but
; is another larger part of code, needs diligence to code it.

; color data generation:
; either copy tile data to temporary buffer when creating new row/col data and later
; copy that data to screen or render color information of tiles to color ram.
; Note that the offset would be different then as char data was generated with different
; offset as it was a frame before. But this happens only when rendering tiles directly
; to screen what was used when some boni were collected. If we use sprites for boni
; we can avoid that complexity!

; We need to copy new color data for first row after first half of colorram has been
; moved or it will be too late. We also need to split the copying of the first/last column
; color data to upper and lower part and we must copy the upper half of the column
; after the upper part was moved or it will be too late also.

; fixme can we render tile data to linear buffer and copy that later to matching screen?
; thus tile rendering don't need to fiddle with line offsets and screen.
; but it costs twice the copy time, could be slower!
; but like linear copy for color (buffer to colorram) we can have simple unrolled versions
; that write directly to matching address. This should be much faster than address computation...
; it needs even more code, another kb of code for transfer... 

; fixme debugging
; left scroll at begin shows totally garbled output, like screen copy is wrong
; switching left/right lets jump the position one char - offset/delta computation wrong????

; When switching from left to right or vice versa and up to down etc. we need one
; preparation frame with 1 pixel scroll, hence the neutral position for left/up is
; 3 not 4. This is because there should be two frames until char movement, so for
; left/up the process starts at 3 with screen preparation then to 1 with color
; preparation and then 7 where new char position is used, finally 5 and then 3.
; This means when scroll starts we need to check if neutral position is matching
; directory and if not we need one preparation frame.

; raster IRQ to blend out sprites is needed, invalid mode or bitmap on
; and restored later! so do not directly write vicctrl but to var,
; and set that later!

; how can we debug what values were written to the hardware registers one after another?
; difficult!
; hardware register stuff looks ok, the jerky movement is because of wrong copy...
; remove that 0xdeadbeef stuff! remove hardware register debug dump stuff
; older errors:
; we need data generator.

!if TESTING {
TEMP0 = $2
VICBGCOL = $D020
VICFGCOL = $D021
VICCTRL2 = $D016
VICCTRL1 = $D011
VICRASTER = $D012
COLORRAM = $D800
VICBANK = 0
VICMEMCTRL = $D018
VICCHARSETBLOCK = 2	; block 2 has offset 4k
SCREEN0POSITION = 1
SCREEN1POSITION = 15
SCREEN0 = VICBANK*$4000+SCREEN0POSITION*$0400
SCREEN1 = VICBANK*$4000+SCREEN1POSITION*$0400
CIA1_DATAPORT_A = $DC00

!to "test/scrolling2d.prg", cbm

!src "src/macros.a"

*= $0801	; Program start at 2049

; Basic start code 1979 SYS2066:REM TJ
!byte $10,$08,$BB,$07,$9E,$32,$30,$36,$36,$3A,$8F,$20,$54,$4A,$00,$00,$00

main
	; set up multicolor mode and scroll situation initially.
	jsr scrolling_init
	; wait for raster to be at mid of screen
--	lda #130
-	cmp VICRASTER
	bcs -
	; call midcode
!if DEBUG_TIMING { inc VICBGCOL }
	jsr scrolling_midscreen
!if DEBUG_TIMING { dec VICBGCOL }
	; wait for raster to be at end of screen
	lda #218
-	cmp VICRASTER
	bcs -
	; call endcode
!if DEBUG_TIMING { inc VICBGCOL }
	jsr scrolling_endscreen
!if DEBUG_TIMING { dec VICBGCOL }
	; read joystick control for scroll testing, joystick bits to direction!
	lda CIA1_DATAPORT_A	; last four bits are up, down, left, right, fire
	and #$0F
	eor #$0F		; negate bits
	tax
	lda joy_scrolldir,x
	sta scroll_active
	; repeat, but wait first until raster is again near start of screen
-	lda VICRASTER
	bmi -
	jmp --

joy_scrolldir
!byte 0, 2, 6, 0,  8, 1, 7, 0,  4, 3, 5, 0,  0, 0, 0, 0

; for testing - fixme we need versions that write to screen0 AND version for screen1,
; how did the old code do that? vertically we can have half tiles, this will be a complex
; and slow code!
scroll_generate_first_row
	lda screen_pos_x+1
	clc
	adc screen_pos_y+1
	tay
	ldx #39
-	tya
	sta scroll_color_newdata_tmpbuf_row-1,x
	sta SCREEN0-1,x
	iny
	dex
	bne -
	rts

scroll_generate_last_row
	lda screen_pos_x+1
	clc
	adc screen_pos_y+1
	adc #$33
	tay
	ldx #39
-	tya
	sta scroll_color_newdata_tmpbuf_row-1,x
	sta SCREEN0-1+20*40,x
	iny
	dex
	bne -
	rts

scroll_generate_first_col
;fixme iterations columns not easy
	rts

scroll_generate_last_col
	rts

}

; fixme there is certainly some space left at the bottom of screen0 or screen1 for these

screen_pos_x
!word 0

screen_pos_y
!word 0

!word scoll_code_end_adr-scoll_code_begin_adr	;fixme size measurement, 4437 bytes now, will be more finally

!byte 0xde, 0xad, 0xbe, 0xef ;fixme remove

scroll_active
!byte 0

scroll_direction
!byte 0

scroll_phase
!byte 0

scroll_srcdst_flag
!byte 0

scroll_vicmemctrl
!byte 0

!byte 0xde, 0xad, 0xbe, 0xef ;fixme remove

scroll_debug_count ;fixme remove
!byte 0
scroll_debug_buf
!for COUNT, 0, 255 {
!byte 0
}

scroll_color_tmpbuf
!for COUNT, 0, 38 {	; we need 39 bytes at most
!byte 0
}

scroll_color_newdata_tmpbuf_row
!for COUNT, 0, 38 {	; we need 39 bytes at most
!byte 0
}

scroll_color_newdata_tmpbuf_col
!for COUNT, 0, 24 {	; we need 25 bytes at most
!byte 0
}

scoll_code_begin_adr ; for measuring size

; ----------- tables with data

; we can use one table with 10 bytes for both, as 6 bytes overlap!
scroll_delta_y
!byte $E0, $E0, $E0, $00, $20, $20, $20, $00, $E0, $E0
scroll_delta_x = scroll_delta_y + 2

screen_pos_neutral_y
!byte $30, $30, $30, $00, $40, $40, $40, $00, $30, $30
screen_pos_neutral_x = screen_pos_neutral_y + 2

; Note that the tables alone take 64byte plus alignment.
!align 15,0
scroll_jmp_table_midscreen_0to1
!word scroll_left_up_midscreen_0to1
!word scroll_up_midscreen_0to1
!word scroll_right_up_midscreen_0to1
!word scroll_right_midscreen_0to1
!word scroll_right_down_midscreen_0to1
!word scroll_down_midscreen_0to1
!word scroll_left_down_midscreen_0to1
!word scroll_left_midscreen_0to1

scroll_jmp_table_midscreen_1to0
!word scroll_left_up_midscreen_1to0
!word scroll_up_midscreen_1to0
!word scroll_right_up_midscreen_1to0
!word scroll_right_midscreen_1to0
!word scroll_right_down_midscreen_1to0
!word scroll_down_midscreen_1to0
!word scroll_left_down_midscreen_1to0
!word scroll_left_midscreen_1to0

scroll_jmp_table_endscreen_0to1
!word scroll_left_up_endscreen_0to1
!word scroll_up_endscreen_0to1
!word scroll_right_up_endscreen_0to1
!word scroll_right_endscreen_0to1
!word scroll_right_down_endscreen_0to1
!word scroll_down_endscreen_0to1
!word scroll_left_down_endscreen_0to1
!word scroll_left_endscreen_0to1

scroll_jmp_table_endscreen_1to0
!word scroll_left_up_endscreen_1to0
!word scroll_up_endscreen_1to0
!word scroll_right_up_endscreen_1to0
!word scroll_right_endscreen_1to0
!word scroll_right_down_endscreen_1to0
!word scroll_down_endscreen_1to0
!word scroll_left_down_endscreen_1to0
!word scroll_left_endscreen_1to0

scroll_jmp_table_color_midscreen
!word scroll_color_left_up_midscreen
!word scroll_color_up_midscreen
!word scroll_color_right_up_midscreen
!word scroll_color_right_midscreen
!word scroll_color_right_down_midscreen
!word scroll_color_down_midscreen
!word scroll_color_left_down_midscreen
!word scroll_color_left_midscreen

scroll_jmp_table_color_endscreen
!word scroll_color_left_up_endscreen
!word scroll_color_up_endscreen
!word scroll_color_right_up_endscreen
!word scroll_color_right_endscreen
!word scroll_color_right_down_endscreen
!word scroll_color_down_endscreen
!word scroll_color_left_down_endscreen
!word scroll_color_left_endscreen

; by coincidence we can use the same values for both registers when multicolor is enabled!
; vicctrl1: hibit irq off, extended color mode off, bitmap off, screen on
; vicctrl2: multicolor enabled
scroll_vicctrl1
!byte $17,$16,$15,$14,$13,$12,$11,$10

!if HIRES {
scroll_vicctrl2
!byte $07,$06,$05,$04,$03,$02,$01,$00
} else {
scroll_vicctrl2 = scroll_vicctrl1
}

; copy data from temporary buffers to color ram.
; note that we can use index register for horizontal copy,
; but that adds 39*(1+2+3)=234 cycles (4 RL) to the copy cost (8*39=312 | 5.3 RL)
; and we would save 38*6-3=225 bytes of ram. Rather use the ram.
; this also means all the color copy eats another 1kb of ram!
scroll_copy_color_first_row
!for COUNT, 0, 38 {
	lda scroll_color_newdata_tmpbuf_row+COUNT
	sta COLORRAM+COUNT
}
	rts

scroll_copy_color_last_row
!for COUNT, 0, 38 {
	lda scroll_color_newdata_tmpbuf_row+COUNT
	sta COLORRAM+20*40+COUNT
}
	rts

scroll_copy_color_first_col_midscreen
!for COUNT, 0, 9 {
	lda scroll_color_newdata_tmpbuf_col+COUNT
	sta COLORRAM+COUNT*40
}
	rts

scroll_copy_color_first_col_endscreen
!for COUNT, 10, 20 {
	lda scroll_color_newdata_tmpbuf_col+COUNT
	sta COLORRAM+COUNT*40
}
	rts

scroll_copy_color_last_col_midscreen
!for COUNT, 0, 9 {
	lda scroll_color_newdata_tmpbuf_col+COUNT
	sta COLORRAM+COUNT*40+38
}
	rts

scroll_copy_color_last_col_endscreen
!for COUNT, 10, 20 {
	lda scroll_color_newdata_tmpbuf_col+COUNT
	sta COLORRAM+COUNT*40+38
}
	rts

; Use a macro that is called with source/dest offset and number of rows and start row.

!macro screen_part_copy .srcoff, .dstoff, .numcols, .numrows, .rowoff, .srcadr, .dstadr {
!if DEBUG_TIMING { inc VICBGCOL }
	ldy #.numcols
.copycode
!for ROW, .rowoff, .rowoff+.numrows-1 {
	lda .srcadr+ROW*40-1+.srcoff,y
	sta .dstadr+ROW*40-1+.dstoff,y
}
	dey
	bne .copycode
!if DEBUG_TIMING { dec VICBGCOL }
}

!macro color_part_copy .srcoff, .dstoff, .numcols, .numrows, .rowoff, .right, .upward {
!if DEBUG_TIMING { inc VICBGCOL }
!if .right {
	ldy #1	; reverse has offset 1 so we need to use that on forward too
} else {
	ldy #.numcols
}
.copycode
!if .upward {
!set .extraoffset = 0
!if .rowoff = 0 {
!set .extraoffset = 1
	lda COLORRAM+(.numrows-1)*40-1+.srcoff,y
	sta scroll_color_tmpbuf-1,y
}
!for ROW, .rowoff+.numrows-1-.extraoffset, .rowoff {	; copy upwards
	lda COLORRAM+ROW*40-1+.srcoff,y
	sta COLORRAM+ROW*40-1+.dstoff,y
}
!if .rowoff > 0 {
	lda scroll_color_tmpbuf-1,y
	sta COLORRAM+(.rowoff-1)*40-1+.dstoff,y
}
} else {	; not upward, so side or down
!for ROW, .rowoff, .rowoff+.numrows-1 {	; copy downwards
	lda COLORRAM+ROW*40-1+.srcoff,y
	sta COLORRAM+ROW*40-1+.dstoff,y
}
}
!if .right {
	iny
	cpy #(.numcols+1)
} else {
	dey
}
	bne .copycode
!if DEBUG_TIMING { dec VICBGCOL }
}

scroll_left_up_midscreen_0to1
	+screen_part_copy 0, 41, 38, 10, 0, SCREEN0, SCREEN1
	rts

scroll_left_up_endscreen_0to1
	+screen_part_copy 0, 41, 38, 10, 10, SCREEN0, SCREEN1
	jsr scroll_generate_first_row
	jmp scroll_generate_first_col

scroll_up_midscreen_0to1
	+screen_part_copy 0, 40, 39, 10, 0, SCREEN0, SCREEN1
	rts

scroll_up_endscreen_0to1
	+screen_part_copy 0, 40, 39, 10, 10, SCREEN0, SCREEN1
	jmp scroll_generate_first_row

scroll_right_up_midscreen_0to1
	+screen_part_copy 1, 40, 38, 10, 0, SCREEN0, SCREEN1
	rts

scroll_right_up_endscreen_0to1
	+screen_part_copy 1, 40, 38, 10, 10, SCREEN0, SCREEN1
	jsr scroll_generate_first_row
	jmp scroll_generate_last_col

scroll_right_midscreen_0to1
	+screen_part_copy 1, 0, 38, 10, 0, SCREEN0, SCREEN1
	rts

scroll_right_endscreen_0to1
	+screen_part_copy 1, 0, 38, 11, 10, SCREEN0, SCREEN1
	jmp scroll_generate_last_col

scroll_right_down_midscreen_0to1
	+screen_part_copy 41, 0, 38, 10, 0, SCREEN0, SCREEN1
	rts

scroll_right_down_endscreen_0to1
	+screen_part_copy 41, 0, 38, 10, 10, SCREEN0, SCREEN1
	jsr scroll_generate_last_row
	jmp scroll_generate_last_col

scroll_down_midscreen_0to1
	+screen_part_copy 40, 0, 39, 10, 0, SCREEN0, SCREEN1
	rts

scroll_down_endscreen_0to1
	+screen_part_copy 40, 0, 39, 10, 10, SCREEN0, SCREEN1
	jmp scroll_generate_last_row

scroll_left_down_midscreen_0to1
	+screen_part_copy 40, 1, 38, 10, 0, SCREEN0, SCREEN1
	rts

scroll_left_down_endscreen_0to1
	+screen_part_copy 40, 1, 38, 10, 10, SCREEN0, SCREEN1
	jsr scroll_generate_last_row
	jmp scroll_generate_first_col

scroll_left_midscreen_0to1
	+screen_part_copy 0, 1, 38, 10, 0, SCREEN0, SCREEN1
	rts

scroll_left_endscreen_0to1
	+screen_part_copy 0, 1, 38, 11, 10, SCREEN0, SCREEN1
	jmp scroll_generate_first_col

scroll_left_up_midscreen_1to0
	+screen_part_copy 0, 41, 38, 10, 0, SCREEN1, SCREEN0
	rts

scroll_left_up_endscreen_1to0
	+screen_part_copy 0, 41, 38, 10, 10, SCREEN1, SCREEN0
	jsr scroll_generate_first_row
	jmp scroll_generate_first_col

scroll_up_midscreen_1to0
	+screen_part_copy 0, 40, 39, 10, 0, SCREEN1, SCREEN0
	rts

scroll_up_endscreen_1to0
	+screen_part_copy 0, 40, 39, 10, 10, SCREEN1, SCREEN0
	jmp scroll_generate_first_row

scroll_right_up_midscreen_1to0
	+screen_part_copy 1, 40, 38, 10, 0, SCREEN1, SCREEN0
	rts

scroll_right_up_endscreen_1to0
	+screen_part_copy 1, 40, 38, 10, 10, SCREEN1, SCREEN0
	jsr scroll_generate_first_row
	jmp scroll_generate_last_col

scroll_right_midscreen_1to0
	+screen_part_copy 1, 0, 38, 10, 0, SCREEN1, SCREEN0
	rts

scroll_right_endscreen_1to0
	+screen_part_copy 1, 0, 38, 11, 10, SCREEN1, SCREEN0
	jmp scroll_generate_last_col

scroll_right_down_midscreen_1to0
	+screen_part_copy 41, 0, 38, 10, 0, SCREEN1, SCREEN0
	rts

scroll_right_down_endscreen_1to0
	+screen_part_copy 41, 0, 38, 10, 10, SCREEN1, SCREEN0
	jsr scroll_generate_last_row
	jmp scroll_generate_last_col

scroll_down_midscreen_1to0
	+screen_part_copy 40, 0, 39, 10, 0, SCREEN1, SCREEN0
	rts

scroll_down_endscreen_1to0
	+screen_part_copy 40, 0, 39, 10, 10, SCREEN1, SCREEN0
	jmp scroll_generate_last_row

scroll_left_down_midscreen_1to0
	+screen_part_copy 40, 1, 38, 10, 0, SCREEN1, SCREEN0
	rts

scroll_left_down_endscreen_1to0
	+screen_part_copy 40, 1, 38, 10, 10, SCREEN1, SCREEN0
	jsr scroll_generate_last_row
	jmp scroll_generate_first_col

scroll_left_midscreen_1to0
	+screen_part_copy 0, 1, 38, 10, 0, SCREEN1, SCREEN0
	rts

scroll_left_endscreen_1to0
	+screen_part_copy 0, 1, 38, 11, 10, SCREEN1, SCREEN0
	jmp scroll_generate_first_col

scroll_color_left_up_midscreen
	+color_part_copy 0, 41, 38, 10, 0, 0, 1
	jsr scroll_copy_color_first_row
	jmp scroll_copy_color_first_col_midscreen

scroll_color_left_up_endscreen
	+color_part_copy 0, 41, 38, 10, 10, 0, 1
	jmp scroll_copy_color_first_col_endscreen

scroll_color_up_midscreen
	+color_part_copy 0, 40, 39, 10, 0, 0, 1
	jmp scroll_copy_color_first_row

scroll_color_up_endscreen
	+color_part_copy 0, 40, 39, 10, 10, 0, 1
	rts

scroll_color_right_up_midscreen
	+color_part_copy 1, 40, 38, 10, 0, 1, 1
	jsr scroll_copy_color_first_row
	jmp scroll_copy_color_last_col_midscreen

scroll_color_right_up_endscreen
	+color_part_copy 1, 40, 38, 10, 10, 1, 1
	jmp scroll_copy_color_last_col_endscreen

scroll_color_right_midscreen
	+color_part_copy 1, 0, 38, 10, 0, 1, 0
	jmp scroll_copy_color_last_col_midscreen

scroll_color_right_endscreen
	+color_part_copy 1, 0, 38, 11, 10, 1, 0
	jmp scroll_copy_color_last_col_endscreen

scroll_color_right_down_midscreen
	+color_part_copy 41, 0, 38, 10, 0, 1, 0
	jmp scroll_copy_color_last_col_midscreen

scroll_color_right_down_endscreen
	+color_part_copy 41, 0, 38, 10, 10, 1, 0
	jsr scroll_copy_color_last_col_endscreen
	jmp scroll_copy_color_last_row

scroll_color_down_midscreen
	+color_part_copy 40, 0, 39, 10, 0, 0, 0
	rts

scroll_color_down_endscreen
	+color_part_copy 40, 0, 39, 10, 10, 0, 0
	jmp scroll_copy_color_last_row

scroll_color_left_down_midscreen
	+color_part_copy 40, 1, 38, 10, 0, 0, 0
	jmp scroll_copy_color_first_col_midscreen

scroll_color_left_down_endscreen
	+color_part_copy 40, 1, 38, 10, 10, 0, 0
	jsr scroll_copy_color_first_col_endscreen
	jmp scroll_copy_color_last_row

scroll_color_left_midscreen
	+color_part_copy 0, 1, 38, 10, 0, 0, 0
	jmp scroll_copy_color_first_col_midscreen

scroll_color_left_endscreen
	+color_part_copy 0, 1, 38, 11, 10, 0, 0
	jmp scroll_copy_color_first_col_endscreen


; fixme strip the parallax and tile render code out and use the existing code
; for left/right as source how to handle the scrolling, register programming and so on

!macro scroll_jmp_table_call .tableadr {	; takes 16 cycles.
	asl
	clc
	adc #((<.tableadr) - 2)
	sta .jmpadr+1
.jmpadr
	jmp (.tableadr)
}

scrolling_init
	; set up VIC control register and screen position to half char shift
	lda scroll_vicctrl1+4
	sta VICCTRL1
	lda scroll_vicctrl2+4
	sta VICCTRL2
	lda screen_pos_x
	ora #$40
	sta screen_pos_x
	lda screen_pos_y
	ora #$40
	sta screen_pos_y
	; clear all helper variables
	lda #0
	sta scroll_active
	sta scroll_direction
	sta scroll_srcdst_flag
	sta scroll_phase
	+set8im VICMEMCTRL, SCREEN0POSITION*16+VICCHARSETBLOCK*2
	rts

scrolling_midscreen
	; in certain scroll phases we need to call code to copy parts of screen
	; when scrolling is currently active (direction is set) just continue
	; scrolling in that direction.
	; If it is not set, check if is requested by scroll_active and transfer
	; the value from there. In that case also check for a prepration frame
	; that is needed when switching to opposite direction.
	; We need to scroll 1 pixel then and adjust screen_pos.
	; We detect that here and set a flag to do preparation frame at endscreen.
	lda scroll_direction
	bne scrolling_midscreen_active
	ldy scroll_active
	bne +
	rts
+	; no direction set but scroll is requested
	sty scroll_direction	; so save it
	; check if current screen pos is valid start pos for that scroll direction.
	; if not, we have to set scroll_phase to FF to signal preparation frame
	; and we have to adjust screen position then
	; The screen position should not be modfied at endscreen then
	; Bits 4-6 of each position must match the start value of direction
	; but only if neutral value is needed for that direction
	lda screen_pos_neutral_x-1,y
	beq +
	lda screen_pos_x
	and #$70
	cmp screen_pos_neutral_x-1,y
	bne scrolling_midscreen_needs_preparation_frame
+	lda screen_pos_neutral_y-1,y
	beq +
	lda screen_pos_y
	and #$70
	cmp screen_pos_neutral_y-1,y
	bne scrolling_midscreen_needs_preparation_frame
	; normal code, phase=0, we need to start preparations
	; Toggle flag for source/destination screen
+	lda scroll_srcdst_flag
	eor #$80
	sta scroll_srcdst_flag
	bmi +
	lda #SCREEN0POSITION*16+VICCHARSETBLOCK*2
	sta scroll_vicmemctrl
	tya	; restore direction
	+scroll_jmp_table_call scroll_jmp_table_midscreen_1to0
+	lda #SCREEN1POSITION*16+VICCHARSETBLOCK*2
	sta scroll_vicmemctrl
	tya	; restore direction
	+scroll_jmp_table_call scroll_jmp_table_midscreen_0to1
scrolling_midscreen_needs_preparation_frame
	; adjust screen pos, needs preparation frame
	; we have to check again whether x and/or y need to be corrected,
	; or we would need to handle all 3 cases in 3 code parts on first check with
	; some code duplication so we can spare the tests here. But it would not be
	; much faster.
	lda screen_pos_neutral_x-1,y
	beq +
	lda screen_pos_x
	and #$8F
	ora screen_pos_neutral_x-1,y
	sta screen_pos_x
+	lda screen_pos_neutral_y-1,y
	beq +
	lda screen_pos_y
	and #$8F
	ora screen_pos_neutral_y-1,y
	sta screen_pos_y
+	+set8im scroll_phase, $FF
	rts
scrolling_midscreen_active
	; check phase, can be only 1-3, action needed for 1 (color ram copy)
	; accu still has direction
	ldx scroll_phase
	cpx #1
	beq +
	; phase 2 or 3 is nothing to do
	rts
+	; phase 1 means do upper color ram shift
	+scroll_jmp_table_call scroll_jmp_table_color_midscreen

scrolling_endscreen
	ldy scroll_direction
	bne +
	rts
+	; adjust screen_pos and program hardware register
	; but not for phase FF
	lda scroll_phase
	bmi scrolling_endscreen_adjust_hw_registers
	; shift screen pos by scroll direction
	ldx screen_pos_x+1	; a bit faster to have it in x during computation
	lda scroll_delta_x-1,y	; y register is direction 1-8
	bpl +
	dex
+	clc
	adc screen_pos_x
	sta screen_pos_x
	bcc +
	inx
+	stx screen_pos_x+1
	ldx screen_pos_y+1
	lda scroll_delta_y-1,y	; y register is direction 1-8
	bpl +
	dex
+	clc
	adc screen_pos_y
	sta screen_pos_y
	bcc +
	inx
+	stx screen_pos_y+1
scrolling_endscreen_adjust_hw_registers
	; read screen pos and adjust hardware registers
	; when doing that while changing it we can save 2*LDA (8 cycles) but need to double
	; all this code, so don't do that
	lda screen_pos_x
	lsr
	lsr
	lsr
	lsr
	and #$07
	tax
	lda scroll_vicctrl2,x
	sta VICCTRL2
	lda screen_pos_y
	lsr
	lsr
	lsr
	lsr
	and #$07
	tax
	lda scroll_vicctrl1,x
	sta VICCTRL1
	; increase scroll phase and check for copy operations
	ldx scroll_phase
	inx
	stx scroll_phase
	cpx #4
	bne +
	; scroll reached end, stop by clearing direction
	+set8im scroll_phase, 0	; reinit to default
	sta scroll_direction
scrolling_endscreen_done
	rts
+	cpx #1			; check if we need to do screen copy
	bne ++
	tya	; direction to a for jump table
	ldy scroll_srcdst_flag
	bmi +
	+scroll_jmp_table_call scroll_jmp_table_endscreen_1to0
+	+scroll_jmp_table_call scroll_jmp_table_endscreen_0to1
++	cpx #2
	bne scrolling_endscreen_done	; phase 0 or 3 do nothing
	; when phase is now 2 do colorram copy and switch screens
	lda scroll_vicmemctrl
	sta VICMEMCTRL
	tya	; direction to a for jump table
	+scroll_jmp_table_call scroll_jmp_table_color_endscreen

scoll_code_end_adr ; for measuring size

