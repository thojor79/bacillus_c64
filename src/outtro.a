; Bacillus_c64
; Copyright (C) 2016-2017  Thorsten Jordan.
; 
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

; ***************************************************************************************
;
;    outtro screen/scroller
;
; ***************************************************************************************

; memory layout in last bank:
; 8k bitmap data ($C000-$DFFF, covering color ram and I/O range)
; 2k charset data ($E000-$E7FF), read by CPU to generate sprite data
; 1k screen data ($E800-$EBFF)
; 4.5k variable sprite data ($EC00-$FDFF)
OUTTRO_VICMEMCTRL = 10*16+0*8	; screen at 10/16, bitmap at 0/2
OUTTRO_BITMAP_ADR = $C000
OUTTRO_CHARSET_ADR = $E000
OUTTRO_SCREEN_ADR = $E800
OUTTRO_SPRITES_START_ADR = $EC00
OUTTRO_SPRITES_END_ADR = $FE00
OUTTRO_TEXT_ADR = temp_data_begin + 0	; starts at outtro_text
OUTTRO_SCROLL_LINE = temp_data_begin + 2	; 0...23
OUTTRO_SPRITE_POINTER_FIRST_ROW = temp_data_begin + 3	; sprite pointer for first displayed row of sprites
OUTTRO_SPRITE_DATA_ADR = temp_data_begin + 4		; where generated sprite data is stored (for line that needs to be generated)
OUTTRO_IRQ_SPRITE_POINTER = temp_data_begin + 6		; sprite pointer for current row of sprites in raster irq
OUTTRO_IRQ_SPRITE_START_LINE = temp_data_begin + 7	; sprite Y coord for current row of sprites in raster irq

; fixme: scroll stop does not work, fire button check missing
; fixme let sprite colors blink in grey?
; fixme scrolling has some bumps, doesn't scroll evenly!

; sprite coordinates are 51+26*N, where N=0...8, the start coordinate can be
; shifted 25 lines upwards for scrolling.
; so raster lines are: 51, 77, 103, 129, 155, 181, 207, 233, 259.
; so overflow for last sprite. But sprites >= 251 can't be seen either.
; so it doesn't matter or we can stop when Y is >= 251 or carry bit set after add.
OUTTRO_RL0 = 51
OUTTRO_FIRST_SPRITE_PTR = (OUTTRO_SPRITES_START_ADR - VICBANK*$4000) / 64	; this + 0...71

show_outtro
; set background color and turn off display
	+set8im VICCTRL1, 0
	+set8im VICBGCOL, 0
	+copy8 VICFGCOL, introscreen_backgroundcolor

; copy data to destination
	sei			; we need to blend out I/O area and color RAM first
	+set8im $01, $30	; set all RAM
	+set16im TEMPADR0, introscreen_bitmapdata_rle
	+set16im TEMPADR1, OUTTRO_BITMAP_ADR
	jsr rle_decode
	+set8im 1, $31	; blend in char ROM
	+memcopy_pages $E000, $D800, 8	; 8 pages, read character set
	+set8im $01, $35	; blend in I/O and color RAM again, all RAM else
	cli
	+set16im TEMPADR0, introscreen_chardata_rle
	+set16im TEMPADR1, OUTTRO_SCREEN_ADR
	jsr rle_decode
	+set16im TEMPADR0, introscreen_colordata_rle
	+set16im TEMPADR1, COLORRAM
	jsr rle_decode

; turn on display and set video mode and memory area
	+set8im VICMEMCTRL, OUTTRO_VICMEMCTRL    ; in bitmap mode bit 3 sets bitmap block
	+set8im VICCTRL1, $3B
	+set8im VICCTRL2, $18

; initially clear all sprite data (4*4+2=18 pages)
	ldx #0
	txa
-
!for COUNT, 0, 17 {
	sta $EC00+COUNT*$100,x
}
	dex
	bne -

; set up sprite X coords, colors and visibility (X=88+N*24, 88,112,136,160,184,208,232,256 -> highbits $80
	ldx #1
!for COUNT, 0, 7 {
	+set8im $D000+COUNT*2, <(88+COUNT*24)	; 320 pixel with 24 base offset, 192 width, rest 128, half 64, +24 = 88
	stx $D027+COUNT
}
	+set8im $D010, $80
	+set8im VICSPRITEENABLE, $FF

; set up outtro raster irq (sprite multiplexer)
	sei
	+set16im $FFFE, rasterirq_outtro_text
	+set8im framecounter, 0
	sta OUTTRO_SCROLL_LINE
	+set16im OUTTRO_TEXT_ADR, outtro_text
	+set16im OUTTRO_SPRITE_DATA_ADR, OUTTRO_SPRITES_START_ADR+8*8*64 ; 8 rows of 8 sprites of 64 byte
	+set8im OUTTRO_IRQ_SPRITE_START_LINE, OUTTRO_RL0
	+set8im OUTTRO_IRQ_SPRITE_POINTER, OUTTRO_FIRST_SPRITE_PTR
	sta OUTTRO_SPRITE_POINTER_FIRST_ROW
	+set8im VICRASTER, OUTTRO_RL0-3
	cli

; generate last row of sprites first
	jsr outtro_gen_new_sprite_line

	; wait for framecounter & 3 to become zero (scroll up every 4th frame)
--	lda framecounter
	and #3
	bne --
-	lda framecounter
	and #3
	beq -
	inc OUTTRO_SCROLL_LINE	; scroll up one line
	lda #24
	cmp OUTTRO_SCROLL_LINE
	bne --		; not yet next sprite row reached
	; handle next row of sprites!
	+set8im OUTTRO_SCROLL_LINE, 0		; reset scroll registers
	+add16im8 OUTTRO_TEXT_ADR, 48		; advance text source pointer
	ldy #0
	lda (OUTTRO_TEXT_ADR),y
	beq outtro_stopscroll			; if end marker reached, stop scroll
	lda OUTTRO_SPRITE_DATA_ADR+1		; advance sprite data address to next row
	clc
	adc #2		; 8 sprites of 64 byte = $0200 offset
	cmp #>OUTTRO_SPRITES_END_ADR		; handle wrap of address
	bne +
	lda #>OUTTRO_SPRITES_START_ADR
+	sta OUTTRO_SPRITE_DATA_ADR+1
	lda OUTTRO_SPRITE_POINTER_FIRST_ROW	; advance sprite pointer for display to next row
	clc
	adc #8
	cmp #(OUTTRO_FIRST_SPRITE_PTR + 72)	; handle wrap at sprite pos 72.
	bcc +
	lda #OUTTRO_FIRST_SPRITE_PTR
+	sta OUTTRO_SPRITE_POINTER_FIRST_ROW
	jsr outtro_gen_new_sprite_line		; generate sprite data for new row
	; fixme test for joy 2 button!
	jmp --
outtro_stopscroll
	; wait for keypress, then return
	jmp *	; fixme
	rts

; offset of sprite data address for every character of 24 in 8 sprites
outtro_offset_table_lo
!for COUNT, 0, 7 {
!byte <(COUNT*64+0), <(COUNT*64+1), <(COUNT*64+2)
}
!for COUNT, 0, 7 {
!byte <(COUNT*64+0+39), <(COUNT*64+1+39), <(COUNT*64+2+39)
}
outtro_offset_table_hi
!for COUNT, 0, 7 {
!byte >(COUNT*64+0), >(COUNT*64+1), >(COUNT*64+2)
}
!for COUNT, 0, 7 {
!byte >(COUNT*64+0+39), >(COUNT*64+1+39), >(COUNT*64+2+39)
}

; generate a new line of sprites by copying char set data according to text values
outtro_gen_new_sprite_line
	; because 3 characters make up one sprite, we somehow need to handle 3 characters
	; for start address.
	; for (u8 i = 0; i < 48; ++i)
	;   srcadr = charadr + *(textadr + i) * 8;
	;   spritebaseadr is stored and added with wrap
	;   dstadr = spritebaseadr + *(offsettable + i)
	;   for (u8 j = 0; j < 8; ++j)
	;     *dstadr = *srcadr;
	;     dstadr += 3
	;     srcadr += 1
	+set8im TEMP0, 0		; char counter 0...24
outtro_gen_new_sprite_line_next_char
	ldy TEMP0	
	+set8im TEMPADR1+1, $E0/8	; prepare srcadr high byte
	lda (OUTTRO_TEXT_ADR),y		; load next char
	; better prepare read address and add 48 in every call...
	asl				; char num * 8 + base address
	rol TEMPADR1+1
	asl
	rol TEMPADR1+1
	asl
	rol TEMPADR1+1
	sta TEMPADR1			; srcadr done
	lda #0
	sta outtro_adr2+1
	lda OUTTRO_SPRITE_DATA_ADR
	clc
	adc outtro_offset_table_lo,y
	sta outtro_adr2+1
	lda OUTTRO_SPRITE_DATA_ADR+1
	adc outtro_offset_table_hi,y
	sta outtro_adr2+2		; dstadr done
	ldx #0				; line of char data
	ldy #0
-	lda (TEMPADR1),y		; load source
outtro_adr2
	sta $BEEF			; store data
	+add16im8 outtro_adr2+1, 3
	iny
	cpy #8
	bne -
	inc TEMP0
	lda #48
	cmp TEMP0
	bne outtro_gen_new_sprite_line_next_char
	rts

; the raster irq that shows the texts
rasterirq_outtro_text
	pha
	txa
	pha
	tya
	pha
	; Raster IRQ is triggered 2-3 lines above so we can set y coordinates first.
	lda OUTTRO_IRQ_SPRITE_START_LINE	; load sprite Y
!for COUNT, 0, 7 {
	sta $D001+COUNT*2			; store for all sprites
}
	; set sprite pointers
	ldx OUTTRO_IRQ_SPRITE_POINTER		; load pointer for sprite 0
!for COUNT, 0, 7 {
	stx OUTTRO_SCREEN_ADR+$3F8+COUNT	; pointer+0...7 to sprite pointers
	inx
}
	; increase sprite Y coord, sprite line and raster irq registers
	lda OUTTRO_IRQ_SPRITE_START_LINE
	clc
	adc #31					; add 26+5 (fewer commands with trick!)
	bcs ++					; sprite Y >= 251 (Y+5 >= 256) ? stop display
	sbc #4					; carry is clear, subtract -1-4 to have +26
	sta OUTTRO_IRQ_SPRITE_START_LINE
	sbc #2					; carry is always clear, sub 3 (-1-2)
	sta VICRASTER				; trigger next raster
	; sprite pointer for next row alread in X, handle possible wrap
	cpx #(OUTTRO_FIRST_SPRITE_PTR + 72)	; handle wrap at sprite pos 72.
	bne +
	ldx #OUTTRO_FIRST_SPRITE_PTR
+	stx OUTTRO_IRQ_SPRITE_POINTER
	jmp rasterirq_ack_and_end
++	; last line of sprites reached, reset all values
	; raster line, coordinates, sprite pointers
	lda #OUTTRO_RL0
	sbc OUTTRO_SCROLL_LINE	; carry is still set!
	sta OUTTRO_IRQ_SPRITE_START_LINE
	sec
	sbc #3
	sta VICRASTER
	+copy8 OUTTRO_IRQ_SPRITE_POINTER, OUTTRO_SPRITE_POINTER_FIRST_ROW
	inc framecounter
	jmp rasterirq_ack_and_end

; 24 characters per line, N lines
outtro_text
!scr "This is the first test !"
!scr "of the 72 sprite scrollr"
!scr "that was coded for the !"
!scr "new bacillus for C64 gam"
!scr "made in 2017 by Thorsten"
!scr "Jordan with help of the "
!scr "great Debian linux systm"
!scr "Greetings go to all C64 "
!scr "maniacs and coders! Well"
!scr "it is great to see that "
!scr "the scene is still alive"
!scr "for an 35 year old machi"
!scr "Greetings go to Florian,"
!scr "Lasse and Saul! ........"
!scr "I got my C64 at the very"
!scr "end of the 1980ties and "
!scr "begun coding with the in"
!scr "famous BASIC V2. Later  "
!scr "on I started coding a .."
!scr "few things in machine .."
!scr "language or assembler. !"
!scr "After doing some raster "
!scr "irq tricks and basic ex-"
!scr "pansion stuff I tried --"
!scr "more complex things like"
!scr "map rendering but my rou"
!scr "tines were to slow. Then"
!scr "I abandoned the C64 in ."
!scr "012345678901234567890123"
!scr "@"	; end marker

