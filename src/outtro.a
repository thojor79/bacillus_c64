; Bacillus_c64
; Copyright (C) 2016-2017  Thorsten Jordan.
; 
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

; ***************************************************************************************
;
;    outtro screen/scroller
;
; ***************************************************************************************

; memory layout in last bank:
; 8k bitmap data ($C000-$DFFF, covering color ram and I/O range)
; 2k charset data ($E000-$E7FF), read by CPU to generate sprite data
; 1k screen data ($E800-$EBFF)
; 4.5k variable sprite data ($EC00-$FDFF)
OUTTRO_VICMEMCTRL = 10*16+0*8	; screen at 10/16, bitmap at 0/2
OUTTRO_BITMAP_ADR = $C000
OUTTRO_CHARSET_ADR = $E000
OUTTRO_SCREEN_ADR = $E800
OUTTRO_SPRITES_START_ADR = $EC00
OUTTRO_SPRITES_END_ADR = $FE00
OUTTRO_TEXT_ADR = temp_data_begin + 0	; starts at outtro_text
OUTTRO_SCROLL_LINE = temp_data_begin + 2	; 0...25
OUTTRO_SPRITE_POINTER_FIRST_ROW = temp_data_begin + 3	; sprite pointer for first displayed row of sprites
OUTTRO_SPRITE_DATA_ADR = temp_data_begin + 4		; where generated sprite data is stored (for line that needs to be generated)
OUTTRO_IRQ_SPRITE_POINTER = temp_data_begin + 6		; sprite pointer for current row of sprites in raster irq
OUTTRO_IRQ_SPRITE_START_LINE = temp_data_begin + 7	; sprite Y coord for current row of sprites in raster irq
OUTTRO_IRQ_SCROLL_FLAG = temp_data_begin + 8		; number of text rows to generate, < 0 to stop

; Note scroll logic is in IRQ to it is frame accurate.
; IRQ counts the number of sprite rows to generate up,
; main code waits and counts it down. So scrolling is always smooth,
; even if text generation takes more than one frame (which can happen,
; as text generator is costly!)

; sprite coordinates are 51+26*N, where N=0...8, the start coordinate can be
; shifted 25 lines upwards for scrolling.
; so raster lines are: 51, 77, 103, 129, 155, 181, 207, 233, 259.
; so overflow for last sprite. But sprites >= 251 can't be seen either.
; so it doesn't matter or we can stop when Y is >= 251 or carry bit set after add.
OUTTRO_RL0 = 51
OUTTRO_FIRST_SPRITE_PTR = (OUTTRO_SPRITES_START_ADR - VICBANK*$4000) / 64	; this + 0...71

show_outtro
; set background color and turn off display
	+set8im VICCTRL1, 0
	+set8im VICBGCOL, 0
	+copy8 VICFGCOL, outtro_backgroundcolor

; copy data to destination
	sei			; we need to blend out I/O area and color RAM first
	+set8im $01, $30	; set all RAM
	+set16im TEMPADR0, outtro_bitmapdata_rle
	+set16im TEMPADR1, OUTTRO_BITMAP_ADR
	jsr rle_decode
	+set16im TEMPADR0, outtro_chardata_rle
	+set16im TEMPADR1, OUTTRO_SCREEN_ADR
	jsr rle_decode
	+set16im TEMPADR0, outtro_colordata_rle
	+set16im TEMPADR1, COLORRAM
	+set8im $01, $35	; blend in COLORRAM
	jsr rle_decode
	+set8im $01, $30	; set all RAM

; now replicate the image in the top left corner (sized 40x64 MC pixels, so 10x8 blocks),
; copy it 4 times horizontally and 3 time vertically, screen and color ram as well.
; So 12 versions of it.
; so there are 80 bytes to be copied to 3 other (or 11 other) places, same for screen and color.
; This takes a bit of code as well.
; For screen this are 10 bytes, same for color.
; rather use tables than to hardcode all copy commands!
; but this are very complex commands/tables!
; or duplicate ONE line and then just triple the data with memcpy calls.
; one row of 80 (10) bytes per X register, 4 targets and 8 lines, seems fair
	ldx #80
-
!for LINES, 0, 7 {
	lda OUTTRO_BITMAP_ADR+LINES*320-1,x
!for COUNTX, 1, 3 {
	sta OUTTRO_BITMAP_ADR+LINES*320+80*COUNTX-1,x
}
}
	dex
	bne -
	ldx #10
-
!for LINES, 0, 7 {
	lda OUTTRO_SCREEN_ADR+LINES*40-1,x
!for COUNTX, 1, 3 {
	sta OUTTRO_SCREEN_ADR+LINES*40+10*COUNTX-1,x
}
}
	dex
	bne -
	+set8im $01, $35	; blend in COLORRAM
	ldx #10
-
!for LINES, 0, 7 {
	lda COLORRAM+LINES*40-1,x
!for COUNTX, 1, 3 {
	sta COLORRAM+LINES*40+10*COUNTX-1,x
}
}
	dex
	bne -
	+set8im $01, $30	; set all RAM
+	; copy first row of images to two more rows
	+set8im outtro_prep_adr0+2, >OUTTRO_BITMAP_ADR
	+set8im outtro_prep_adr1+2, >(OUTTRO_BITMAP_ADR+320*8)
	+set8im outtro_prep_adr2+2, >(OUTTRO_BITMAP_ADR+320*16)
	ldy #10 ; x is now 0
outtro_prep_adr0
	lda OUTTRO_BITMAP_ADR,x
outtro_prep_adr1
	sta OUTTRO_BITMAP_ADR+320*8,x
outtro_prep_adr2
	sta OUTTRO_BITMAP_ADR+320*16,x;fixme somehow doesnt work-write colorram overwrites bitmap
	dex
	bne outtro_prep_adr0
	; count up addresses
	inc outtro_prep_adr0+2
	inc outtro_prep_adr1+2
	inc outtro_prep_adr2+2
	dey
	bne outtro_prep_adr0
	; same for char and color data - copy 320 bytes to two destinations
	; x is 0 here
-	lda OUTTRO_SCREEN_ADR,x
	sta OUTTRO_SCREEN_ADR+320,x
	sta OUTTRO_SCREEN_ADR+320*2,x
	dex
	bne -
	ldx #64
-	lda OUTTRO_SCREEN_ADR+255,x
	sta OUTTRO_SCREEN_ADR+320+255,x
	sta OUTTRO_SCREEN_ADR+320*2+255,x
	dex
	bne -
	+set8im $01, $35	; blend in COLORRAM
-	lda COLORRAM,x
	sta COLORRAM+320,x
	sta COLORRAM+320*2,x
	dex
	bne -
	ldx #64
-	lda COLORRAM+255,x
	sta COLORRAM+320+255,x
	sta COLORRAM+320*2+255,x
	dex
	bne -

; all data set up, continue
	+set8im 1, $31	; blend in char ROM
	+memcopy_pages $E000, $D800, 8	; 8 pages, read character set
	+set8im $01, $35	; blend in I/O and color RAM again, all RAM else
	cli

; turn on display and set video mode and memory area
	+set8im VICMEMCTRL, OUTTRO_VICMEMCTRL    ; in bitmap mode bit 3 sets bitmap block
	+set8im VICCTRL1, $3B
	+set8im VICCTRL2, $18

; initially clear all sprite data (4*4+2=18 pages)
	ldx #0
	txa
-
!for COUNT, 0, 17 {
	sta $EC00+COUNT*$100,x
}
	dex
	bne -

; set up sprite X coords, colors and visibility (X=88+N*24, 88,112,136,160,184,208,232,256 -> highbits $80
	ldx #1
!for COUNT, 0, 7 {
	+set8im $D000+COUNT*2, <(88+COUNT*24)	; 320 pixel with 24 base offset, 192 width, rest 128, half 64, +24 = 88
	stx $D027+COUNT
}
	+set8im $D010, $80
	+set8im VICSPRITEENABLE, $FF
	+set8im $D01C, 0			; Multicolor off for all sprites

; set up outtro raster irq (sprite multiplexer)
	sei
	+set16im $FFFE, rasterirq_outtro_text
	+set8im framecounter, 0
	sta OUTTRO_SCROLL_LINE
	+set16im OUTTRO_TEXT_ADR, outtro_text
	+set16im OUTTRO_SPRITE_DATA_ADR, OUTTRO_SPRITES_START_ADR+8*8*64 ; 8 rows of 8 sprites of 64 byte
	+set8im OUTTRO_IRQ_SPRITE_START_LINE, OUTTRO_RL0
	+set8im OUTTRO_IRQ_SPRITE_POINTER, OUTTRO_FIRST_SPRITE_PTR
	sta OUTTRO_SPRITE_POINTER_FIRST_ROW
	+set8im VICRASTER, OUTTRO_RL0-3
	+set8im OUTTRO_IRQ_SCROLL_FLAG, 0
	cli

; generate last row of sprites first
	jsr outtro_gen_new_sprite_line

	; wait for scroll flag to be > 1
--	lda CIA1_DATAPORT_A			; if joy2 fire is pressed, return
	and #$10
	beq ++
	lda OUTTRO_IRQ_SCROLL_FLAG
	beq --
	; handle next row of sprites!
	dec OUTTRO_IRQ_SCROLL_FLAG
	+add16im8 OUTTRO_TEXT_ADR, 48		; advance text source pointer
	ldy #0
	lda (OUTTRO_TEXT_ADR),y
	beq outtro_stopscroll			; if end marker reached, stop scroll
	lda OUTTRO_SPRITE_DATA_ADR+1		; advance sprite data address to next row
	clc
	adc #2		; 8 sprites of 64 byte = $0200 offset
	cmp #>OUTTRO_SPRITES_END_ADR		; handle wrap of address
	bne +
	lda #>OUTTRO_SPRITES_START_ADR
+	sta OUTTRO_SPRITE_DATA_ADR+1
	jsr outtro_gen_new_sprite_line		; generate sprite data for new row
	jmp --
outtro_stopscroll
	+set8im OUTTRO_IRQ_SCROLL_FLAG, $FF
	; wait for keypress, then return
-	lda CIA1_DATAPORT_A			; if joy2 fire is pressed, return
	and #$10
	bne -
++	+set8im VICSPRITEENABLE, 0		; disable all sprites
	; restore irq
	sei
	; restore text sprites
	+set8im 1, $30          ; blend out I/O area - enable all RAM
	+memcopy_pages VICSPRITES, textcharset_data, 16 ; 42 sprites -> 10.5k, we copy all 64.
	+set16im $FFFE, rasterirq_noop
	+set8im 1, $35		; blend in I/O, all else RAM.
	cli
	rts

; offset of sprite data address for every character of 24 in 8 sprites
outtro_offset_table_lo
!for COUNT, 0, 7 {
!byte <(COUNT*64+0), <(COUNT*64+1), <(COUNT*64+2)
}
!for COUNT, 0, 7 {
!byte <(COUNT*64+0+39), <(COUNT*64+1+39), <(COUNT*64+2+39)
}
outtro_offset_table_hi
!for COUNT, 0, 7 {
!byte >(COUNT*64+0), >(COUNT*64+1), >(COUNT*64+2)
}
!for COUNT, 0, 7 {
!byte >(COUNT*64+0+39), >(COUNT*64+1+39), >(COUNT*64+2+39)
}

; generate a new line of sprites by copying char set data according to text values
; note that this takes most time of a full frame!
outtro_gen_new_sprite_line
	; because 3 characters make up one sprite, we somehow need to handle 3 characters
	; for start address.
	; for (u8 i = 0; i < 48; ++i)
	;   srcadr = charadr + *(textadr + i) * 8;
	;   spritebaseadr is stored and added with wrap
	;   dstadr = spritebaseadr + *(offsettable + i)
	;   for (u8 j = 0; j < 8; ++j)
	;     *dstadr = *srcadr;
	;     dstadr += 3
	;     srcadr += 1
	+set8im TEMP0, 0		; char counter 0...24
outtro_gen_new_sprite_line_next_char
	ldy TEMP0	
	+set8im TEMPADR1+1, (>OUTTRO_CHARSET_ADR)/8	; prepare srcadr high byte
	lda (OUTTRO_TEXT_ADR),y		; load next char
	asl				; char num * 8 + base address
	rol TEMPADR1+1
	asl
	rol TEMPADR1+1
	asl
	rol TEMPADR1+1
	sta TEMPADR1			; srcadr done
	lda #0
	sta outtro_adr2+1
	lda OUTTRO_SPRITE_DATA_ADR
	clc
	adc outtro_offset_table_lo,y
	sta outtro_adr2+1
	lda OUTTRO_SPRITE_DATA_ADR+1
	adc outtro_offset_table_hi,y
	sta outtro_adr2+2		; dstadr done
	ldx #0				; line of char data
	ldy #0
-	lda (TEMPADR1),y		; load source
outtro_adr2
	sta $BEEF,x			; store destination
	iny				; source pointer ++
	+addx 3
	cpy #8
	bne -
	inc TEMP0
	lda #48
	cmp TEMP0
	bne outtro_gen_new_sprite_line_next_char
	rts

outtro_text_col
!byte 1, 1, 1, 1, 1, 13, 15, 13,   1, 1, 1, 1, 1, 13, 15, 13

; the raster irq that shows the texts
rasterirq_outtro_text
	pha
	txa
	pha
	tya
	pha
	; Raster IRQ is triggered 2-3 lines above so we can set y coordinates first.
	lda OUTTRO_IRQ_SPRITE_START_LINE	; load sprite Y
!for COUNT, 0, 7 {
	sta $D001+COUNT*2			; store for all sprites
}
	; set sprite pointers
	ldx OUTTRO_IRQ_SPRITE_POINTER		; load pointer for sprite 0
!for COUNT, 0, 7 {
	stx OUTTRO_SCREEN_ADR+$3F8+COUNT	; pointer+0...7 to sprite pointers
	inx
}
	; increase sprite Y coord, sprite line and raster irq registers
	; lda OUTTRO_IRQ_SPRITE_START_LINE ; still in Accu!
	clc
	adc #31					; add 26+5 (fewer commands with trick!)
	bcs ++					; sprite Y >= 251 (Y+5 >= 256) ? stop display
	sbc #4					; carry is clear, subtract -1-4 to have +26
	sta OUTTRO_IRQ_SPRITE_START_LINE
	sbc #2					; carry is always clear, sub 3 (-1-2)
	sta VICRASTER				; trigger next raster
	; sprite pointer for next row alread in X, handle possible wrap
	cpx #(OUTTRO_FIRST_SPRITE_PTR + 72)	; handle wrap at sprite pos 72.
	bne +
	ldx #OUTTRO_FIRST_SPRITE_PTR
+	stx OUTTRO_IRQ_SPRITE_POINTER
	jmp rasterirq_ack_and_end
++	; last line of sprites reached, reset all values
	; raster line, coordinates, sprite pointers.
	; but as first check for scrolling
	inc framecounter

	lda framecounter	; horizontal color cycling
	lsr
	and #7
	tax
!for COUNT, 0, 7 {
	lda outtro_text_col+COUNT,x
	sta $D027+COUNT
}

	lda framecounter
	and #3
	bne ++					; every 4th frame
	; handle smooth scrolling here - so screen update doesn't block scrolling
	lda OUTTRO_IRQ_SCROLL_FLAG
	bmi ++					; no more scrolling
	inc OUTTRO_SCROLL_LINE			; scroll up one line
	lda #26
	cmp OUTTRO_SCROLL_LINE
	bne ++					; handle wrap
	+set8im OUTTRO_SCROLL_LINE, 0		; reset scroll line
	lda OUTTRO_SPRITE_POINTER_FIRST_ROW	; advance sprite pointer for display to next row
	clc
	adc #8
	cmp #(OUTTRO_FIRST_SPRITE_PTR + 72)	; handle wrap at sprite pos 72.
	bcc +
	lda #OUTTRO_FIRST_SPRITE_PTR
+	sta OUTTRO_SPRITE_POINTER_FIRST_ROW
	inc OUTTRO_IRQ_SCROLL_FLAG		; let generate next row!
++	; set values for next irq to happen first in frame
	lda #OUTTRO_RL0
	sec
	sbc OUTTRO_SCROLL_LINE
	sta OUTTRO_IRQ_SPRITE_START_LINE
	; carry is clear, so sub only 2 (-2-1 = -3)
	sbc #2
	sta VICRASTER
	+copy8 OUTTRO_IRQ_SPRITE_POINTER, OUTTRO_SPRITE_POINTER_FIRST_ROW
	jmp rasterirq_ack_and_end

; 24 characters per line, N lines
outtro_text
!scr "***   WELL DONE !!!  ***"
!scr "                        "
!scr "  You escaped all evil  "
!scr "defense cells and poison"
!scr "and gathered enough food"
!scr "     to breed a new     "
!scr " generation of BACILLUS."
!scr "                        "
!scr "                        "
!scr "Press fire to return to "
!scr " main menu and let your "
!scr "offspring gather enough "
!scr " food for the next gen. "
!scr "                        "
!scr "                        "
!scr "Or read about my own C64"
!scr "story and the greetings!"
!scr "                        "
!scr "Thanks for all the great"
!scr "tools nowadays like ACME"
!scr " VICE, X1541 and so on, "
!scr "  that make developer's "
!scr "  life so much easier.  "
!scr "Greetings to all the C64"
!scr "maniacs out there.  Nice"
!scr "to see that the scene is"
!scr "still alive for a 35year"
!scr "      old machine!      "
!scr "Greetings to Lasse Oorni"
!scr " Florian and Saul Cross."
!scr "                        "
!scr "I got my own C64 at the "
!scr "very end of the 1980ties"
!scr " and started to hack in "
!scr " the infamous BASIC V2. "
!scr "After few years I tried "
!scr " to code some things in "
!scr "6510 machine language or"
!scr " assembler. Beside some "
!scr "raster tricks and memcpy"
!scr " tests I begun to code  "
!scr "some map rendering algo "
!scr "in assembler, but it was"
!scr "to slow. I abandoned my "
!scr "C64 in 1994 to switch to"
!scr "a 486 PC. All the years "
!scr "my devices where stored "
!scr "away but were still func"
!scr " tional.  After reading "
!scr "something about the C64 "
!scr "colors I wrote my first "
!scr "image converter C64FY.py"
!scr "just for curiosity. Then"
!scr " I read something about "
!scr "possible color mixing so"
!scr "I had to code some lines"
!scr " for testing. From then "
!scr " on it took many small  "
!scr " steps while the retro  "
!scr "fever already had me to "
!scr "try to implement all the"
!scr "thing I every wanted to "
!scr " do on a C64 when I was "
!scr "15. So I coded parallax "
!scr " smooth 50fps scrolling "
!scr "and did everything that "
!scr "was needed for a working"
!scr " game and all that you  "
!scr " have seen now. I hope  "
!scr "that you have enjoyed it"
!scr "and will keep this scene"
!scr "  and machine alive!!!  "
!scr "                        "
!scr "                        "
!scr "(C) Thorsten Jordan 2017"
!scr "                        "
!scr "                        "
!scr "                        "
!scr "                        "
!scr "                        "
!scr "                        "
!scr "                        "
!scr "                        "
!scr "Now press fire to return"
!scr "   to the main menu!    "
!scr "                        "
!scr "                        "
!scr "                        "
!scr "                        "
!scr "                        "
!scr "                        "
!scr "                        "
!scr "@"	; end marker - number of lines must be even!

!src "data/outtro_rle.a"

