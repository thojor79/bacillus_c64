; Bacillus_c64
; Copyright (C) 2016-2017  Thorsten Jordan.
; 
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

; ***************************************************************************************
;
;    sprite multiplexer
;
; ***************************************************************************************

NR_OF_VIRTUAL_SPRITES = 12 ; 32	; first test, extreme amount - test fewer because of offset overflow!
NR_OF_SPRITE_IRQS = NR_OF_VIRTUAL_SPRITES - 8 + 1
MIN_SPRITE_Y = 30
MAX_SPRITE_Y = 250

;TESTING = 1
;DEBUG_TIMING = 1
;TEST_STATIC_POS = 1
;KERNAL_RAND_POS = 1

; A sprite multiplexer takes an arbitrary number of virtual sprites and maps
; it to the 8 hardware sprites. The number of virtual sprites doesn't need
; to be a multiple of 8, but it is easier to use it that way.
; Virtual sprites are sorted by their y coordinate and then assigned to the
; 8 hardware sprites in the sorted order. Non visible virtual sprites are
; skipped, if there is a virtual sprite that would be the ninth sprite on a
; raster line it is skipped as well. Then the virtual sprites left over are
; assigned to several raster irqs that set up the hardware sprite registers.
; For 8 hardware sprites and N virtual sprites we can prove that there are
; at most N-8 irqs (without the first irq or code that sets up the first 8
; sprites at once). This would be the case if every new virtual sprite is
; just one raster line below the previous one and can not be set by the irq
; for the previous sprite because there is still some sprite displaying for
; that hardware sprite (we call it slot). This is a very rare case, normally
; the amount of irqs is much lower.
; So we have to compare the sorted y coordinates to screen boundaries,
; against slot y coordinate and to the current raster line of the
; current irq. We can use this preparation also to have real 16 or 9 bit x
; coordinates and don't need to fiddle with the clumsy $D010 register that
; stores all 9th bits of all sprites.
; So for every hardware sprite we have to write 4 bytes (y, xlow, pointer,
; color - in that order) and one write to xhigh register.
; Common sprite multiplexers write the 5 bytes needed to set up a sprite by
; reading an indexed table which takes at least 4 cycles per load (LDA
; indexed) command. This brings some overhead. Can we avoid the overhead
; without the preparation code to become too slow?
; Note that the fastest we can do in every raster irq to set up sprite data
; is to load the data of the sprite as immediate value and to store it in
; the corresponding registers. That way we can even skip the saving of x/y
; at start of irq. That are simple pairs of LDA #imm, STA D0xx. So interrupt
; has less overhead and every written byte takes only 6 cycles.

; How can we have fastest IRQ code to setup sprites so we can do sprite multiplexing
; with densely packed sprite formations with least graphical artifacts?
; Fastest code to write bytes to registers is to use pairs of LDA #immediate,
; STA register code, taking 6 cycles per written byte. With that code we can even
; shorten IRQ entry to just saving the Accu.
; However we would have to generate the code for all IRQs in advance and this is too
; costly in preparation. But we can get close to it:
; Prepare codeblocks for sprite slots 0-7 and fill in the immediate values with self
; modifying code. IRQ then jumps to the preparated codes. To avoid a preparation of
; jump tables we save the last address that IRQ was in by doing a JSR out of the
; register setup routine and pull the address from stack. By flagging the end of an
; IRQ by setting the topmost bit of color value we can have unrolled code for all
; sprites and only need to fill in the immediate values to load to the registers
; and flag the end of each IRQ by setting bit 7 of last written color value.
; That way the sprite mux IRQ doesn't need to save nor use the X/Y registers!
; For every sprite 4 bytes are written (y/x coord, pointer, color). The combined
; high bits for x are written once per IRQ after setting the individual sprite
; registers.
; With that technique each sprite IRQ is as fast as possible. Only the y values
; are read from a zero page table (taking 1 more cycle per sprite, but saving 4
; cycles during preparation).
; Note that the first 8 sprites can be set directly after preparation and don't need
; an interrupt.
; To write the immediate values into the code we need some destination addresses and
; an offset into memory. To write to all addresses we would either need also unrolled
; preparation code with fix addresses to write to or we use a registers as offset.
; Because registers can only have values 0-255 and every register setup codeblock is
; 25 bytes long, we can set up to 10 extra sprites beside the 8 that are set
; instantly at preparation. We can enlarge that number with some more code tricks by
; incrementing the high bytes of write addresses when the offset register overflows.
; That way we can have more than 8+10=18 virtual sprites, but at the cost of more
; spent cycles. Because we need to increment and later reset the addresses, but it
; is doable.
; If we would read all data from zeropage it would take 3 more cycles per sprite but
; we don't need to modify the interrupt code, but have all tables in zeropage.
; This is sortorder, xhigh values and rasterlines per irq and y/x/p/c values, that
; would take N,2*(N-8),N,3*(N-8) bytes with N virtual sprites (7*N-5*8).
; For 32 sprites this would take 184 bytes of zeropage which is (too) much.
; With 18 sprites it would take 86 bytes. So better use code manipulation technique.

; fixme test first static display, movement later
; compare with Lasse's multiplexer multi2

; fixme test timing! use various number of sprites and check how timing scales!

; fixme last sprite is not shown!! with 11 sprites it works, but not with 12+
; is xhigh the problem? seems not?
; end of irq is marked for sprite #16 but why?! (with 18 sprites)
; check where endflags are and what lines are used for irqs! 56, 65, 74 or so, is ok. 3 irqs, ok!

; fixme number of rasterlines to trigger irq before sprite should be dynamic!

; fixme
; Unroll for 10 sprites so we can have up to 18 or 28, that is enough!

!if TESTING {
TEMP0 = 2
TEMP1 = 3
TEMP2 = 4
TEMP3 = 5
TEMP4 = 6
TEMP5 = 7
VICBGCOL = $D020
VICFGCOL = $D021
VICCTRL2 = $D016
VICMEMCTRL = $D018
VICCTRL1 = $D011
VICRASTER = $D012
VICIRQMASK = $D01A
VICSPRITEENABLE = $D015
CIA1_ICR = $DC0D

!to "spritemux.prg", cbm

!src "src/macros.a"

*= $0801	; Program start at 2049

; Basic start code 1979 SYS2066:REM TJ
!byte $10,$08,$BB,$07,$9E,$32,$30,$36,$36,$3A,$8F,$20,$54,$4A,$00,$00,$00

main
	; Set position and move values with randomness from kernal code
	; Positions
!if KERNAL_RAND_POS {
	ldx #NR_OF_VIRTUAL_SPRITES-1
main_prep_pos_dxy
	lda $E000,x
	sta vsprite_xl,x
	lda $E018,x
	and #1
	sta vsprite_xh,x
	lda $E030,x
	sta vsprite_y,x
	; Deltas
	lda $E048,x
	and #3
	clc
	adc #1
	sta vsprite_dx,x
	lda $E060,x
	and #1
	clc
	adc #1
	sta vsprite_dy,x
	dex
	bpl main_prep_pos_dxy
}
	; Set up generic IRQ handling (only raster irqs)
	sei
	+set8im VICRASTER, 0
	+set8im VICCTRL1, $1B	; clear 9th bit of raster line selector, set mc mode
	+set8im VICIRQMASK, $01	; Set only raster as source for IRQ of VIC (default $F0)
	lda #$7F		; disable timer IRQs
	sta CIA1_ICR
	lda CIA1_ICR		; ack CIA irq
	asl $D019		; Acknowledge possible pending raster irq
	+set8im 1, $35		; only I/O, no kernal
	jsr sprite_mux_init
	; wait for raster at bottom
--	lda #251
-	cmp VICRASTER
	bcs -
	jsr sprite_mux_prepare  ; sorting works
!if DEBUG_TIMING {
	+set8im VICBGCOL, 14
}
!if TEST_STATIC_POS {
	jmp --
}
	; increment x/y and repeat.
	ldx #NR_OF_VIRTUAL_SPRITES-1
-	lda vsprite_xl,x
	clc
	adc vsprite_dx,x
	sta vsprite_xl,x
	lda vsprite_xh,x
	adc #0
	sta vsprite_xh,x
	beq +
	lda vsprite_xl,x
	bpl +
	; x overflow - subtract 384
	dec vsprite_xh,x
	lda vsprite_xl,x
	sec
	sbc #128
	sta vsprite_xl,x
+	lda vsprite_y,x
	clc
	adc vsprite_dy,x
	sta vsprite_y,x
	dex
	bpl -
	; next frame
	jmp --

!src "sprites32_sprdata.a"	; sprites32_data

vsprite_dx
!for COUNT, 0, NR_OF_VIRTUAL_SPRITES-1 {
	!byte (((COUNT * 789) % 3) + 1)
}

vsprite_dy
!for COUNT, 0, NR_OF_VIRTUAL_SPRITES-1 {
	!byte ((COUNT * 337) & 1) + 1
}

}


vsprite_y
!for COUNT, 0, NR_OF_VIRTUAL_SPRITES-1 {
	!if TESTING {
		!byte 50 + 5*COUNT
;		!byte 50+((COUNT * 37157) % 180)
	} else {
		!byte 0
	}
}
!byte 255	; stop marker

vsprite_xl
!for COUNT, 0, NR_OF_VIRTUAL_SPRITES-1 {
	!if TESTING {
		!byte <(24 + (COUNT & 7) * 30 + (COUNT / 8) * 10)
	} else {
		!byte 0
	}
}

vsprite_xh
!for COUNT, 0, NR_OF_VIRTUAL_SPRITES-1 {
	!if TESTING {
		!byte >(24 + (COUNT & 7) * 30 + (COUNT / 8) * 10)
	} else {
		!byte 0
	}
}

vsprite_ptr
!for COUNT, 0, NR_OF_VIRTUAL_SPRITES-1 {
	!if TESTING {
		!byte (sprites32_data/64+COUNT)
	} else {
		!byte 0	
	}
}

vsprite_col
!for COUNT, 0, NR_OF_VIRTUAL_SPRITES-1 {
	!if TESTING {
		!byte ((COUNT % 15) + 7) & 15
	} else {
		!byte 0
	}
}

bit_nand_table
!for BIT, 0, NR_OF_VIRTUAL_SPRITES-8-1 {
!byte 255-(1<<(BIT&7))
}

bit_or_table
!for BIT, 0, NR_OF_VIRTUAL_SPRITES-8-1 {
!byte (1<<(BIT&7))
}

; be careful: needs 5*N-3*8 bytes (N=16,24,32 -> 56,96,136 bytes in zeropage!)
sprite_sort_order = 63		; must be in zeropage because of stx xxx,y
; Note! The following data doesn't need to be in zeropage, but xhval/rasterline
; should be 32byte aligned so we only need to change the lower address byte.
sprite_sorted_y = 96
; $D010 values (xhigh) for all IRQs.
sprite_irq_xhval = 128
; Rasterline values for all IRQs from second on with trailing zero
sprite_irq_rasterline = 160



; Prepare the sprite multiplexer
sprite_mux_init
	; turn on all sprites
	+set8im VICSPRITEENABLE, $FF
	; prepare any initial sort order - must be in zeropage!
	ldy #NR_OF_VIRTUAL_SPRITES	; +1 because of stop marker!
-	tya
	sta sprite_sort_order,y
	dey
	bpl -
	; set up irq
	sei
	+set16im $FFFE, sprite_mux_irq
	+set8im VICRASTER, 0
	cli
	rts

; *************************************************************
; Routine to prepare next frame's sprite data
; *************************************************************
; sorts sprite indices by the sprite's y coordinate
; and prepares interrupt data (needs to be called while raster is not in
; visible area of screen!
; USES	TEMP0,TEMP1,TEMP2,TEMP3,TEMP4,A,X,Y
SPRITE_MUX_XHVAL = TEMP0
SPRITE_MUX_SLOTNR = TEMP1	; 8...NR_OF_VIRTUAL_SPRITES-9
SPRITE_MUX_IRQNR = TEMP2	; Nr. of prepared IRQ 0...
SPRITE_MUX_OFFSET = TEMP3	; offset for irq data write
SPRITE_MUX_SORT_INDEX = TEMP4	; index in sorted table
SPRITE_MUX_CURRENT_Y = TEMP5	; uses as temporary
; ************************************************************
sprite_mux_prepare
!if DEBUG_TIMING {
	inc VICBGCOL
}
	; as first sort indices so that sprite y coordinates are ascending with
	; insertion sort
	; outer counter of insertion sort loop is stored in y/TEMP0, going from 1 to
	; NR_OF_VIRTUAL_SPRITES-1. Inner counter is y register.
	; The virtual sprite number is in x register.
	; currently processed vsprite index in TEMP1, it's y value in accu
	ldy #1
sprite_mux_sort_outerloop
	ldx sprite_sort_order,y
	sty TEMP0
	stx TEMP1
	lda vsprite_y,x
sprite_mux_sort_innerloop	; since y>0 always we only check at end of loop
	ldx sprite_sort_order-1,y
	cmp vsprite_y,x		; compare to Y of processed index
	bcs sprite_mux_sort_innerdone
	stx sprite_sort_order,y
	dey
	bne sprite_mux_sort_innerloop
sprite_mux_sort_innerdone
	ldx TEMP1		; current index
	stx sprite_sort_order,y
	ldy TEMP0
	iny
	cpy #NR_OF_VIRTUAL_SPRITES
	bne sprite_mux_sort_outerloop
!if DEBUG_TIMING {
	inc VICBGCOL
}

; next step: skip all sprites with y coords that are too low
; advance y register to first sprite index with visible sprite
; Note that we already start with Y=8 to avoid adding offset 8 later!
; Minus one because of iny before checking.
; Note that if all sprites are too low, this will completely run amok.
; But that case does never happen in pratice.
	ldy #8-1
	lda #MIN_SPRITE_Y
-	ldx sprite_sort_order-8+1,y
	iny
	cmp vsprite_y,x
	bcs -

; now up to 8 sprites can be shown directly. Copy their sorted y coordinates
; to the zeropage arrays (we need them there for later lookup).
; We can set the other values directly.
; Do NOT break out when y coordinate is too high!
; Because if it is the sprite must not be used and we need to set some value
; for it so it is not displayed instead of turned off - and that is e.g. a
; high y coordinate!
; Logical consequence is: unroll the loop!
; we need to set the correct screen address later!
	+set8im SPRITE_MUX_XHVAL, 0	; prepare D010 (xh) register
sprite_mux_set_first8
!for COUNT, 0, 7 {
	ldx sprite_sort_order+COUNT-8,y
	lda vsprite_y,x
	sta sprite_sorted_y+COUNT
	sta $D001+COUNT*2
	lda vsprite_xl,x
	sta $D000+COUNT*2
	lda vsprite_ptr,x
	sta $07F8+COUNT		; screen address needs replace later
	lda vsprite_col,x
	sta $D027+COUNT
	lda vsprite_xh,x
	beq +
	lda SPRITE_MUX_XHVAL
	ora #(1 << COUNT)
	sta SPRITE_MUX_XHVAL
+
}
sprite_mux_set_first8_end
	sta $D010		; save current xhigh value to register
!if DEBUG_TIMING {
	inc VICBGCOL
}

; copy data for virtual sprites 8-x to irq code!
; up to x-8 iterations:
; if ycoord is too large, stop irq generation, finish last irq
; if ycoord is too close to that of 8 sprites before, 9th sprite, skip
; check current irq line and if sprite can be appended to irq
; if not, finish irq and create next (if not first)
; append data to current irq
; while appending irq data update xhvalue
; when all is done, finish last irq
; fixme reinit write to addresses in this code part! when > 18 vsprites!
	; Note! TEMP0 has still xhigh state (D010) so keep it!
	; y is offset in sprite_sort_order (if not used otherwise)
	; prepare read addresses in IRQ code
	+set8im sprite_irq_setup_code_end+1, sprite_irq_xhval
	+set8im sprite_mux_irq_prepare_next+1, <sprite_irq_rasterline
	+set16im sprite_mux_irq_jmpadr+1, sprite_irq_setup_code
	; prepare irq data
	+set8im SPRITE_MUX_SLOTNR, 0
	sta SPRITE_MUX_IRQNR
	sta SPRITE_MUX_OFFSET
	ldx sprite_sort_order,y	; load next virtual sprite index
	lda vsprite_y,x		; load next virtual sprite y coord
	sec
	sbc #4
	sta VICRASTER		; first raster irq to appear a few lines above 9th sprite
	sta sprite_irq_rasterline-1	; overwrites last xhvalue but needed only in first loop, overwritten later
sprite_mux_prepare_next_vsprite	; y is index in sortlist
	ldx sprite_sort_order,y	; load next virtual sprite index
	lda vsprite_y,x		; load next virtual sprite y coord
	cmp #MAX_SPRITE_Y	; check that sprite ycoord is visible
	bcs sprite_mux_irqs_prepared	; if next virtual sprite y is 255, stop it (also stops on end marker!)
	iny			; advance to next sorted index
	ldx SPRITE_MUX_SLOTNR
	sta sprite_sorted_y+8,x	; store y coordinate
	sta SPRITE_MUX_CURRENT_Y
	lda sprite_sorted_y,x	; load y of 8 sprites before
	adc #21			; C=0, add 21
	cmp SPRITE_MUX_CURRENT_Y	; compare against this y
	bcs sprite_mux_prepare_next_vsprite	; sprite would be 9th in rasterline, skip
	; check if we can draw sprite in current irq.
	; This is the case if current rasterline is >= last y coord for this slot + 21 lines.
	; We already have that value in accu!
	ldx SPRITE_MUX_IRQNR	; check for new irq
	cmp sprite_irq_rasterline-1,x	; compare y of current slot against current irq rasterline
	bcc sprite_mux_prepare_same_irq	; last line of last sprite in same slot already drawn
	; need to make new irq
	lda SPRITE_MUX_CURRENT_Y
	sec
	sbc #4			; some rasterlines before, depends on nr of sprites per irq - not counted yet! fixme
	sta sprite_irq_rasterline,x	; store rasterline for next irq
	inc SPRITE_MUX_IRQNR
	lda SPRITE_MUX_XHVAL		; prepare xhigh
	sta sprite_irq_xhval,x
	; set highest bit of last written color to flag end of irq!
	ldx SPRITE_MUX_OFFSET		; here load target address offset!
	lda sprite_irq_setup_code+16-25,x
	ora #$80
	sta sprite_irq_setup_code+16-25,x
sprite_mux_prepare_same_irq
	ldx sprite_sort_order-1,y	; -1 because y alreadly inc'd
	sty SPRITE_MUX_SORT_INDEX	; save y
	ldy SPRITE_MUX_OFFSET		; here load target address offset!
	lda vsprite_xl,x
	sta sprite_irq_setup_code+6,y	; store x value in irq code
	lda vsprite_ptr,x
	sta sprite_irq_setup_code+11,y	; store ptr value in irq code
	lda vsprite_col,x
	sta sprite_irq_setup_code+16,y	; store col value in irq code
	; inc y by 25 (write to next irq code block) - when overflow inc highbyte of write-to address
	tya
	clc
	adc #25				; can reach max 250, is checked below
	sta SPRITE_MUX_OFFSET
	ldy SPRITE_MUX_SLOTNR
	lda SPRITE_MUX_XHVAL		; xhigh
	and bit_nand_table,y		; slotnumber (NUM_VSPRITES-8 sized!)
	sta SPRITE_MUX_XHVAL
	lda vsprite_xh,x
	beq +
	lda SPRITE_MUX_XHVAL
	ora bit_or_table,y
	sta SPRITE_MUX_XHVAL
+	inc SPRITE_MUX_SLOTNR
	ldy SPRITE_MUX_SORT_INDEX
!if DEBUG_TIMING {
	inc VICBGCOL
}
!if NR_OF_VIRTUAL_SPRITES > 18 {
	lda #250			; 10*25 -> wrap around nears
	cmp SPRITE_MUX_OFFSET
	bne sprite_mux_prepare_next_vsprite
	; prepare next 10 sprites
	jmp * ; fixme - repeat codeblock from above
} else {
	jmp sprite_mux_prepare_next_vsprite
}
sprite_mux_irqs_prepared
!if DEBUG_TIMING {
	inc VICBGCOL
}
	; set terminating 0 to sprite_irq_rasterline
	ldx SPRITE_MUX_IRQNR
	lda #0
	sta sprite_irq_rasterline-1,x
	; set xhigh value of last irq
	lda SPRITE_MUX_XHVAL
	sta sprite_irq_xhval,x

; we need to set the hibyte of the screen address for all virtual sprites!
; so one load and 16-32 stores.
	lda #$07		; hibyte of screen address
; store in unrolled preparation code above as well!
FIRST8_SIZE = (sprite_mux_set_first8_end-sprite_mux_set_first8)/8
!for COUNT, 0, 7 {
	sta sprite_mux_set_first8+COUNT*FIRST8_SIZE+21
}
!for COUNT, 8, NR_OF_VIRTUAL_SPRITES-1 {
	sta sprite_irq_setup_code+(COUNT-8)*25+14
}
!if DEBUG_TIMING {
	+set8im VICBGCOL,14
}
	rts


; ******************************************
; the magic sprite mux irq
; ******************************************
sprite_mux_irq
!if DEBUG_TIMING {
	inc VICBGCOL
}
	pha				; save only accu, X/Y will not be touched!
sprite_mux_irq_jmpadr
	jmp sprite_irq_setup_code	; jump to specific code, address replaced later!
sprite_mux_irq_prepare_next
	lda sprite_irq_rasterline	; read also rasterline for NEXT irq from zero page
	beq sprite_mux_irq_done		; if rasterline is 0, stop further irqs
	sta VICRASTER			; prepare next raster irq
	inc sprite_irq_setup_code_end+1	; increase read addresses for xhigh
	inc sprite_mux_irq_prepare_next+1	; and rasterline
	sec				; check if we are late for next irq!
	sbc #3
	cmp VICRASTER
	bcc sprite_mux_irq_jmpadr	; call next irq directly
sprite_mux_irq_done
	asl $D019			; ACK irq
	pla				; restore accu
!if DEBUG_TIMING {
	dec VICBGCOL
}
	rti

; unrolled code that reads from zeropage and writes to the sprite registers.
; relative offsets for addresses: y:1, x:6, p:11, c:16
; absolute codeblock size: 25 - do not change!
sprite_irq_setup_code
!for COUNT, 8, NR_OF_VIRTUAL_SPRITES-1 {
	lda sprite_sorted_y+COUNT	; read from ZP or immediate? ZP costs only 1 cycle more. but saves preparation time 5cycles!
	sta $D001+(COUNT & 7)*2
	lda #0	; xlow
	sta $D000+(COUNT & 7)*2
	lda #0	; ptr
	sta $07F8+(COUNT & 7)
	lda #0	; color
	sta $D027+(COUNT & 7)
!if COUNT < NR_OF_VIRTUAL_SPRITES-1 {
	bpl +
	jsr sprite_irq_setup_code_end	; save address and return!
+
} else {
	; set last value of xhigh here - but we don't need where to read it
	; and we need to restore sprite_mux_irq_jmpadr - we solve both problems
	; by pushing address to stack and let rest of code handle it correctly.
	; the two pha+lda take 12 cycles, so for last sprite irq the xhigh comes a bit
	; later, but otherwise we would have to get xhval from other address
	lda #<(sprite_mux_irq_done-1)
	pha
	lda #>(sprite_mux_irq_done-1)
	pha
}
}
sprite_irq_setup_code_end
	lda sprite_irq_xhval		; read xhigh value for THIS irq from zero page
	sta $D010			; so xhigh value is set as soon as possible
	; get stored address from stack. JSR/PLA costs, but we save a lot in
	; preparation routine as we don't need jump tables, so good benefit
	; cycles: 4+4+4+4+6+(2|3+6) = 24|31. No x/y register needed!
	; Note! If we use decimal mode anywhere, we need a "cld" here!
	pla
	clc
	adc #1
	sta sprite_mux_irq_jmpadr+1	; need to add 1 to address, because of the way JSR works
	pla
	adc #0
	sta sprite_mux_irq_jmpadr+2
	jmp sprite_mux_irq_prepare_next

