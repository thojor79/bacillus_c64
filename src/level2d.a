; Bacillus_c64
; Copyright (C) 2016-2019  Thorsten Jordan.
; 
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

; ***************************************************************************************
;
; all code related to 2D level data (tile rendering, generation)
;
; ***************************************************************************************

; Note:
; Actor and boni are not longer stored in the level data itself.
; It is complex to read them from data when new tiles are shown on the screen
; and even more difficult to remove them live from screen (boni) or even store
; them later.
; Instead use an extra list with x,y pos (tiles) and type, and parts of that
; list are checked for intersection with screen frame (a bit larger) in frames
; where no copying needs to be done. Then they come to live. Actors leaving
; screen are stored in the list again. All boni are done with sprites, there for
; we have the muxer.

; later give realistic values here! fixme
LEVEL_DATA=$A000
LEVEL_TILE_DATA=$B000
NUM_TILES=$10
LEVEL_TILE_ROW_ADR_L=$9000
LEVEL_TILE_ROW_ADR_H=$9100
;fixme need init function for data, that generates row_adr and generates level data

; fixme if it all really works we can only see when we use realistic tile data from
; bacillus! we have the data and could also use the level unpack code and
; do a 2d level with some special width (non power 2) and much data.
; but if we append the data to code, it will be overwritten by second screen,
; so transfer it somewhere else!

; Here we read and use screen_pos_x/y from scrolling2d.a.
; We read the matching tile data and write that to the buffers:
; scroll_char|color_newdata_tmpbuf_row|col
level_width_tiles
!byte 128
level_height_tiles
!byte 128

level_init
	; Generate LEVEL_TILE_ROW_ADR data with known width/height of level.
	; NUM_TILES must be globally fix for all levels, number of tiles
	; that can be used in level data.
	; fixme Level data itself can be unpacked from RLE code or generated.
	; Level tile data is read for the level/world as tileset.
	; here we also need to render the first screen at start position.
	; start position must be set before scrolling init, depends on level.
	lda #<LEVEL_DATA
	sta LEVEL_TILE_ROW_ADR_L
	lda #>LEVEL_DATA
	sta LEVEL_TILE_ROW_ADR_H
	ldx #1
-	lda LEVEL_TILE_ROW_ADR_L-1,x
	clc
	adc level_width_tiles
	sta LEVEL_TILE_ROW_ADR_L,x
	lda LEVEL_TILE_ROW_ADR_H-1,x
	adc #0
	sta LEVEL_TILE_ROW_ADR_H,x
	inx
	cpx level_height_tiles
	bcc -
	rts

!macro scroll_generate_tile_row .tile_row_nr {
	lda LEVEL_TILE_ROW_ADR_L,x
	sta .read_adr+1
	lda LEVEL_TILE_ROW_ADR_H,x
	sta .read_adr+2
.read_adr
	ldx LEVEL_DATA			; read tile number
	lda LEVEL_TILE_DATA+(0+.tile_row_nr*2)*NUM_TILES,x
	sta scroll_char_newdata_tmpbuf_row_raw,y
	lda LEVEL_TILE_DATA+(1+.tile_row_nr*2)*NUM_TILES,x
	sta scroll_char_newdata_tmpbuf_row_raw+1,y
	lda LEVEL_TILE_DATA+(4+.tile_row_nr*2)*NUM_TILES,x
	sta scroll_color_newdata_tmpbuf_row_raw,y
	lda LEVEL_TILE_DATA+(5+.tile_row_nr*2)*NUM_TILES,x
	sta scroll_color_newdata_tmpbuf_row_raw+1,y
	iny
	iny
	inc .read_adr+1	; load next tile value
	cpy #40		; now 40 or 41, depending on start value
	bcc .read_adr
	rts
}

!macro scroll_generate_tile_col .tile_col_nr {
	stx TEMP0
.loop
	ldx TEMP0
	lda LEVEL_TILE_ROW_ADR_L,x
	sta .read_adr+1
	lda LEVEL_TILE_ROW_ADR_H,x
	sta .read_adr+2
.read_adr
	ldx LEVEL_DATA			; read tile number
	lda LEVEL_TILE_DATA+(0+.tile_col_nr)*NUM_TILES,x
	sta scroll_char_newdata_tmpbuf_col_raw,y
	lda LEVEL_TILE_DATA+(2+.tile_col_nr)*NUM_TILES,x
	sta scroll_char_newdata_tmpbuf_col_raw+1,y
	lda LEVEL_TILE_DATA+(4+.tile_col_nr)*NUM_TILES,x
	sta scroll_color_newdata_tmpbuf_col_raw,y
	lda LEVEL_TILE_DATA+(6+.tile_col_nr)*NUM_TILES,x
	sta scroll_color_newdata_tmpbuf_col_raw+1,y
	iny
	iny
	inc TEMP0	; go to next tile row
	cpy #22		; now 22 or 23, depending on start value
	bcc .loop
	rts
}

scroll_generate_first_row
	ldx screen_pos_y+1
	jmp scroll_generate_row

scroll_generate_last_row
	; last row is 20 chars down, so 10 tiles
	lda screen_pos_y+1
	clc
	adc #10
	tax
scroll_generate_row
	; initialize offset in y, is 0 or 1 depending on x offset (half-tile/one-char offset)
	; if char offset is 0, y is 1 so we render at buffer+1, where it is read.
	; if char offset is 1, y is 0, so we render at buffer, and read is buffer+1 !
	ldy #0
	lda screen_pos_x
	bmi +
	iny
+	lda screen_pos_y
	bmi +
	; first row of a tile has to be rendered
	+scroll_generate_tile_row 0
+	; second row of a tile has to be rendered
	+scroll_generate_tile_row 1

scroll_generate_first_col
	ldx screen_pos_x+1
	jmp scroll_generate_col

scroll_generate_last_col
	; last col is 38 chars further right, so 19 tiles
	lda screen_pos_x+1
	clc
	adc #19
	tax
scroll_generate_col
	; initialize offset in y, is 0 or 1 depending on x offset (half-tile/one-char offset)
	; if char offset is 0, y is 1 so we render at buffer+1, where it is read.
	; if char offset is 1, y is 0, so we render at buffer, and read is buffer+1 !
	ldy #0
	lda screen_pos_y
	bmi +
	iny
+	lda screen_pos_x
	bmi +
	; first col of a tile has to be rendered
	+scroll_generate_tile_col 0
+	; second col of a tile has to be rendered
	+scroll_generate_tile_col 1




; fixme implement tile2d renderer outside... just functions that take screen_pos_x/y
; and read tile data and write that to the buffers.
; offset can be 1 so handle first tile specially or write to buffer-1 or so...
; can we have versions for new row when tiley is char offset 0 and char offset 1?
; and vice versa? so 4 versions for 4 char offsets?
; with tile_y_coord we need to read the correct level data, so the offset for each
; y pos of level needs to be read from a table, even more overhead.
; if all levels are 128 tiles wide, this can be simplified though.
; but it would be good to be flexible here... this is costly for new column generation.
; 21 lines are 11 tiles no matter what offset. 39 columns are 20 tiles no matter what
; offset. so we can always access 20 or 11 tiles and need to adjust the output...
; if we don't have to read (and clear!) the actors from level data, code will be simpler.
; screen_pos_x/y upper byte to tile coordinate. tile data (2 of 4 bytes) for row/col
; to buffer, inc buffer counter twice, then jump to next tile...
; initial buffer offset 0 or 1 then and pointing one byte before buffer...
; for columns add line size to tile coord (8+16 add), costly...
; sounds like a plan, isn't that complicated to do a tile renderer
; have that in some level2d.a, yes

; fixme 56cyc/tile. 20 tiles. so 1120 cycles or 19 raster lines.
; what costs the copy itself? 9 per byte plus 5/13 extra, ca. 9.5per byte with 39
; bytes, so 9*39+39*5/13=351+15=366=6RL,so total 25 RL, even faster than old version, great!
; plus preparation time, that can take longer. and we need a version that switches
; to next tile adr by adding either offset, or rereading the addresses
; lda,clc,adc,sta,lda,adc,sta to add, 4,2,4,4,4,4,4=26 cycles per tile line extra (260), ouch.
; that is 4-5RL just for that. 16c for adjusting adr plus ldx,inx,stx (8-10)
; with that we can have any width of level in 1-255 range...
; when width is always 128 it can be a bit faster, but it would be very inflexible.
; we can inc the read addresses though,but saving x in zeropage is also ok
; inc zp, ldx zp takes only 8 cycles. so 24 cycles for every address...



