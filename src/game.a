; Bacillus_c64
; Copyright (C) 2016-2017  Thorsten Jordan.
; 
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

!to "bacillus.prg", cbm	; Program name
!cpu 6510

; ==============================================================================================
; Jump'n'run on c64 with two-way parallax scrolling, different levels and highscore.
; ==============================================================================================
;
; Main ToDo:
; Show screen shots and readme on github.
; Plan structure:
; Loading/Title screen with bacteria in background and logo in foreground:
;    "Thorsten Jordan presents" / "Bacillus" - skipable by joystick.
; Main screen with logo at top and highscores below and maybe some credits.
;    Ideally use the power of c64fy and have some animation in graphics mode,
;    like mcgfx logo on top and text below.
; Have some simple level change or highscore handling mode with text input later.
;    Need to store current level number and what happens.
; Have 3 or 4 levels (cheese, candy, salad, meat/vegetable?)
;


; Memory Layout:
; ==============
; 0000 - 01FF  0.5k  Zeropage (free from 0002-00FF) and Stack.
; 0200 - 03FF  0.5k  Mostly free except some kernal stuff (now free with disabled kernal)
; 0400 - 0800    1k  Screen at start, later free
; 0800 - BFFF   46k  Program/Data (can basic be overwritten at load?)
; C000 - C3FF    1k  Screen 0 (RAM) - changes frequently, so needs RAM
; C400 - C7FF    1k  Screen 1 (RAM) - dito
; C800 - CFFF    2k  Charset (RAM) - changes because of animated characters, so needs RAM
; D000 - D7FF    2k  I/O Area, Sprites below
; D800 - DFFF    2k  Color RAM, Sprites below
; E000 - FFFF    8k  Kernal, but graphics/sprites below. Last 6 Bytes interrupt vectors!
;
; So we have 12k for sprites (the last one is not fully usable), so we have space for 192 sprites!
; The first 4k of sprites (64 sprites) must be static, because I/O is blended above them.
; Use this area for text sprites (Intro, Game info).
; So we have 128-1=127 sprites free for game. Every actor takes 4 sprites,
; we have one player and 16 enemy sprites, so 4+64 + 16 for player dead
; animation = 84, so there is still space for 43 sprites for some animations
; etc. (traps, boni, decorations whatever)
;
; Level data is also stored in fix memory areas:
; B400 - BFFF    3k  Level data itself (index in tile table)
; B200 - B3FF  0.5k  Tile data (64 tiles in 8 tables because each tile has 8 bytes -> 512 bytes)
;                    And 64 tiles because every tile has 4 chars and max 256 chars, reuse of chars
;                    not accounted.
; Further level data would be: charset, sprites - both go to fixed VIC memory areas.
; More advanced stuff like scripts or so is not yet used.
; Note! $0200 - $0800 is now free! 1.5k of free ram, i.e. for tiledata,
; leveldata, char animations etc.


; Memory for intro screen can be reused.
; Graphics should be packed (RLE)
; Use some more generic naming, so levels are exchangeable, intro screen as well etc.

; More complex stuff _may_ be added later like 8-way scrolling or music.
; Complex intro doesn't work well. Rather simple solutions first and more complex stuff later.
; Best solution would be to have small loader first that does fast load of the rest.
; It can set up VIC bank 3 and load all stuff from 0200 on without kernal, to have
; 55k of free memory. No need to have packed and unpacked gfx in memory together.
; With loading we can store the data where it has to be later already during load.
;
; A generic sprite multiplexer for 24 or 32 sprites would be handy, easier also for the intro.
; Fastest code is immediate load and store, so instead of tables maybe fill in rather values
; into existing code. The problem is the number of interrupt lines where to trigger the
; muxer isn't fix. It can be up to 24-32 different position. Easier to write
; dedicated IRQ code for intro.





; General ideas / infos.

; highest bit in color ram enables MC mode for character, but uses individual color from 0-7.
; So background and two common colors are free, but individual only 0-7.

; Level 1: Cheese world. brown, orange, yellow
; user: e.g. blue for labels, red for some detail etc.
; collect tiles in one large image then, converting all at once... give tile res to c64fy!
; charset is 16x16 chars with 8 pixel per char, hence 128x128 pixel image!

; Level 2: Candy world with purple red etc.

; Level 3: salad...

; We can do parallax scrolling by having two background masks moving with different speed
; and just doing AND or OR with them, i.e. an X grid in front of some other forms.
; This can easily be done with big effect.

; Sprite scroller for intro... with empty lines between text lines we have enough time to
; set sprite pointers so multiplexing isn't that critical so we can do 9 or 10
; versions of a sprite easily.
; maybe instead of text use sprite as scroller, also to show highscores, so we can keep
; the bacteria image in background.

; Rethink what we really want to do! Just another jump and run? or a more complex dungeon
; maze game with random paths, collecting goods etc that is more interesting?
; Or a turrican like shooter which I always wanted to code on the PC?
; Yet another giana sisters clone isn't that interesting.
; Drawing artwork for more levels could be funny, but not really what I wanted.
; C64 programming is about timing, managing the few ressources and doing things in a
; very uncommon way, like 8 tables with single bytes per entry instead of one table
; with 8byte entries. Like extreme loop unrolling and self modifying code.
; Like raster irq hacks up to insane levels.
; Like putting many data packed in ram and drawing full screen graphics or scrolling.
; Most things I already touched, what next?
; 8way scrolling would be good for dungeon game, but is very complex.
; Randomly generating content would be much more interesting when playing it myself,
; and less artwork, more coding. Generating rooms with graph like algos not tree like.
; What would be most interesting next here?
; Enemy ai?
; Problem is randomly generating jump and run levels is very hard, rather do that in
; python on pc and try playing them on c64.
; Two player games would need 2nd joystick. Are they easier done on c64 or on pc?

; --------------------------- further ideas ---------------------------------------

; Animate bonus tile(s).
; jumping fat drop or some yellow cheese pill, maybe rotating around z

; bonus accounting! list number of diamonds in score bar?!
; atm only collects score

; maybe tile with EXIT sign for level end - with extra color in level image

; When scrolling actors lag behind a bit! yes scroll is triggered and frame immediatly shifts,
; but actor data handling is called only next frame, so always lags behind.
; Maybe don't start scrolling immediatly but delay 1 frame? But it would only delay the
; lag. FIX LATER. looks like giana sisters has the same problem. No one
; would ever notice that...

; maybe also add boni as sprites and code a sprite multiplexer!

; Have IRQ there to start color ram shift etc. no, not needed
;
; show scroller in intro will all features, like turrican intro, use color mixing! use color gradient if possible!
;yellow/red e.g.

; Now jumping much better with higher gravity and higher jump speed, seems ok! test with joystick.
; jumping is ok, but too slow when starting to fall down, needs some rework.
; Higher jumps when pressing joystick longer works, but not as good as in turrican

; ---------------------- How screen enter/exit effect works ---------------------
; Screen enter/exit animation like Turrican 2, the spirals:
; use 7x6 double sized sprites with multiplexing (just one sprite data).
; Set/clear bits (64 total, 8x8 bytes) in 64 or 128 frames. Easy to store,
; store byte number and bit number in one byte, using just 64 bytes for full
; animation (could even use some repeat compression). Sprite color is black hires.
; Data used is 24x16, so write 3x2 blocks of bytes every frame.
; Same technique can also be used for any other transitions, maybe even Grand Prix Circuit
; used it that way with the pixel in/out animation.

; ------------- How scrolling works! ------------------------
; Two characters buffers, front and back. One color ram, matching visible (front) buffer.
; Visible columns are 38 or 39 of 40.
; Offset 0 means pixeloffset 0 and visible columns #0-#37 (#0-#37 of world).
; When scrolling to the right, we need to shift color ram when going from offset 7 to 8.
; So we need to prepare the back buffer while increasing pixel offset, e.g. copy half of
; front buffer shifted to back at pixel offset 4 and other half at 6.
; Filling in new column is slow, so we do it in own frame (shift copy in 4, new column in 6).
; This also means color ram is shifted one column left of back buffer.
; While we show the front buffer with columns #0-#38 (contains #0-#39) and matching color ram,
; the back buffer is prepared to hold columns #1-#40. This means we need to store the color
; we generate for new column at some temporary buffer to bring it in later.
; When pixel offset goes to 8, hardware pixel shift goes back to 0, back buffer is shown with
; columns #1 to #40 (visible 38 columns, #1 to #38!) and color ram needs to get shifted one
; column to the left (should start already when half of frame with pixel offset 7 is drawn!)
; copy second half when raster bar is at top of screen with pixel offset 8.
; After shifting of color ram we just copy the last column from temporary buffer to last column
; of color ram and are done.
; We have to do something when raster is at half of screen or at bottom.
; We also need a raster IRQ for the score line. When that is triggered it can also handle the
; actions at screen bottom (shift color ram, render new screen etc).
; Scrolling always stops at character, not at pixel level.
; So we need flags whether screen is moving (and what direction for later),
; screen position in world, pixel phase while moving.
; We do not need general double buffer handling with offset/overlap and computing how many columns
; to update, because scrolling is fixed speed always.
; Scroll register with 38 columns show 1-8 pixel of first char column.
; so the 39th column can't be seen, which makes color ram update less critical.
; This means user can see at most 39 columns, so we can shift whole color ram
; in one run and update the last column later.
; This also explains why we haven't seen flicker/distortions yet.
; it still jitters/stutters but why? copy visible to back buffer takes less than one frame,
; color ram shift as well. sometimes it seems to use more than one frame (debug with frame color)
; maybe because last column update is slow, check if it still that slow after reworking code
; This means color ram column #39 can never be seen, it is not time critical to update it
; any time, e.g. when back buffer screen is prepared. But only for right scroll!
; New idea: scroll N lines at once with N pairs of lda/sta, use x as column counter.
; This is fast and best way to handle overlaps or new data!
; We can shift color ram every screen, but need to shift frame buffers as well,
; so we can do 2x and 4x scroll speed at most, not more.

; enabling extended color mode together with multicolor or bitmap mode
; disables output of VIC, gives only black pixels.


VICBANK = 3		; bank 3 is used multiply, kernal rom, I/O area etc.
COLORRAM = $D800
VICCHARSETBLOCK = 1	; block 1 has offset 2k
VICCHARSETBLOCK_SCORELINE = 7
VICSCREENBLOCK = 0	; screens at blocks 0/1 so offset 0k/1k
VICCHARSET = VICBANK*$4000+VICCHARSETBLOCK*$0800
SCREEN0POSITION = VICSCREENBLOCK
SCREEN1POSITION = VICSCREENBLOCK+1
SCREEN0 = VICBANK*$4000+SCREEN0POSITION*$0400
SCREEN1 = VICBANK*$4000+SCREEN1POSITION*$0400
VICSPRITES = VICBANK*$4000+$1000	; first 4K are two screens and charset ($C000-$CFFF), sprites $D000-$FFFF
VICSPRITES_GAME = VICSPRITES+$1000	; first 64 sprites are text sprites and fix
SPRITEPTR_GAME_OFFSET = 128
VICBGCOL = $D020
VICFGCOL = $D021
VICCTRL2 = $D016
VICMEMCTRL = $D018
VICCTRL1 = $D011
VICRASTER = $D012
TILEWIDTH = 2
TILEHEIGHT = 2
TILEWIDTHINPIXELS = TILEWIDTH*8
TILEHEIGHTINPIXELS = TILEWIDTH*8
TILESXPERSCREEN = 19	; 38 column mode
TILESYPERSCREEN = 12
LINESYPERSCREEN = TILESYPERSCREEN * TILEHEIGHT
HALFLINESYPERSCREEN = LINESYPERSCREEN / 2
HALFSCREENOFFSET = HALFLINESYPERSCREEN*40
PIXELTOPOS = 16
PIXELTOTILE = 16
CIA1_DATAPORT_A = $DC00
CIA2_DATAPORT_A = $DD00
SCROLL_RIGHT = 1
SCROLL_LEFT = 2
LEVEL_DATA = $B400	; absolute address of level data (indices in tile table)
LEVEL_TILE_DATA = $B200	; data for tiles of a level
NR_TILES = 64	; number of tiles used in a level
VICSPRITEENABLE = $D015
VICSPRITECOMMONCOLOR0 = $D025
VICSPRITECOMMONCOLOR1 = $D026
SCPO = 234	; Score Panel Char Offset
SCPO0 = 235
SCPCOUNT = 22
ANIMATED_BGTILE_INDEX = 16	; one tile is animated
FIRST_GROUND_TILE_INDEX = 12	; first tile index that is no background
VAPOR_TILE_INDEX = 52		; this and next tile vaporize
VAPOR_TILE_NUMS = 6		; number of vaporating tiles
PLAYER_DYING_ANIM_PHASES = 128	; number of animation phases for dying anim. for player
PLAYER_DYING_Y_DEC = 4		; speed in y coords that sprite rises
SCORE_FOR_1UP = $99		; can give more than 99 or code would be more complex
SCORE_FOR_SHIELD = $60
SCORE_FOR_BONUS = $03
; --------------- temporary variables in zeropage
TEMP0 = $02
TEMP1 = $03
TEMP2 = $04
TEMP3 = $05
TEMP4 = $06
TEMP5 = $07
TEMPADR0 = $08
TEMPADR1 = $0A
TEMPADR2 = $0C
TEMPADR3 = $0E
; ---------------- temporary data in zeropage and at $0200 and on
; --- note with more than 8 actors zero page space is not sufficient.
temp_data_begin = $10
colorram_tempcolumn = $10	; needs 24 bytes without page boundary - Temporary data for screen scrolling
blend_in_temp = $10		; same space used for blend in temporary values (9 bytes)
chardata_tempcolumn = $28	; also 24 bytes
screen_pos_x = $40		; offset of left border, MSB: tile, LSB: subtile in pixels/subpixel accuracy (4bit/4bit)
render_pos_x = $42		; offset of left border of framebuffer that we render to (in tile,subtile coords, so lower byte is 00 or 80).
; --- data for scrolling
visibleframebuffer = $44
visibleframebuffer_adrmsb = $45
renderframebuffer_adrmsb = $46
backframebuffer_adrmsb = $47
background_animation_phase = $48
colorramshift_to_renderpos = $49
is_scroll_active = $4A		; are we in scrolling mode (stores current scroll direction if != 0)
scroll_direction = $4B		; in what direction are we scrolling (0-none,1-right,2-left,4-up,8-down)
; --- data for actors - note addresses rather per computation, not hardcoded?
actor_state = $4C		; 8*ACTOR_DISABLED, which is 0, so just zero initialize!
actor_x = $54			; LO/HiByte in separate tables
actor_xh = $5C			; LO/HiByte in separate tables
actor_y = $64
actor_yh = $6C
actor_vx = $74
actor_vy = $7C
actor_shape = $84
actor_color = $8C
actor_screen_x = $94
actor_screen_y = $9C
actor_behaviour = $A4
actor_type = $AC
actor_dead_anim_phase = $B4
; -- single byte data
actor_screen_xh = $BC
actor_jump_count = $BD
player_invulnerable_counter = $BE
sprite_anim_phase = $BF
; ----------- generic data
framecounter = $C0
; Data for joystick port #2
joy2_up = $C1
joy2_down = $C2
joy2_left = $C3
joy2_right = $C4
joy2_fire = $C5

temp_data_end = $C6		; final address

temp_data_limit = $F8		; last usable address

; must not be overwritten by zeroing of memory, so place at end of zero page!
vicctrl2_scrolling = $F9

; must not be cleared at level start, so place at end of zero page!
food = $FA
score = $FB	; stored in BCD values, 3 bytes
level_nr = $FE
lives = $FF

char_animation_data = $0200	; space for 512 bytes


; ------------------------ macros --------------------------

!src "src/macros.a"

; -------------------------------------- program ------------------------------------------

*= $0801	; Program start at 2049

; Basic start code 1979 SYS2066:REM TJ
!byte $10,$08,$BB,$07,$9E,$32,$30,$36,$36,$3A,$8F,$20,$54,$4A,$00,$00,$00

main
; ---------------------------- Initialization
; disable interrupts
	sei

; VIC bank set
	lda CIA2_DATAPORT_A+2
	ora #$03
	sta CIA2_DATAPORT_A+2
	lda CIA2_DATAPORT_A
	and #$FC
	ora #(3 - VICBANK)
	sta CIA2_DATAPORT_A

; VIC memory area set up
	lda #VICSCREENBLOCK*16+VICCHARSETBLOCK*2	; in bitmap mode bit 3 sets bitmap block, in charmode bits 1-3 charblock!
	sta VICMEMCTRL
;	lda #>SCREEN0	; inform Kernal where screen is - but we don't need the Kernal
;	sta $288

; Set up generic IRQ handling (only raster irqs)
	+set16im $FFFE, rasterirq_noop	; set to address that does nothing
	+set8im VICRASTER, 0
	+set8im VICCTRL1, $1B	; clear 9th bit of raster line selector, set mc mode
	+set8im $D01A, $01	; Set only raster as source for IRQ of VIC
	lda #$7F		; disable timer IRQs
	sta $DC0D
	lda $DC0D
	asl $D019	; Acknowledge possible pending raster irq

; Initialize data below I/O area (text sprites)
	; address 1 = $30: all RAM
	;           = $31: read CHAR ROM, else all RAM
	;           = $32: read kernal + CHAR ROM, else all RAM
	;           = $35: enable I/O, else all RAM
	;           = $36: enable kernal and I/O, else all RAM
	+set8im 1, $30		; blend out I/O area - enable all RAM
	+memcopy_pages VICSPRITES, textcharset_data, 16 ; 42 sprites -> 10.5k, we copy all 64.

; set interrupt vectors because kernal is disabled
	+set16im $FFFA, only_the_rti	; NMI handler
	+set16im $FFFC, only_the_rts	; reset vector
	+set16im $FFFE, rasterirq_noop	; dummy raster irq with only ack
; Set ROM layout and enable interrupts (blend in I/O, else all RAM).
	+set8im 1, $35
	cli

; -------------------------------------- begin of loading/intro/game --------------------------------------

	jsr show_intro

; Main screen of the game with highscore display
; fixme logo should overwrite only first 8 lines, so shorten rle data!
startmainscreen
	jsr mainscreen

; *********************************** main game logic. *********************************************
; turn display off
	+set8im VICCTRL1, $0B
; set level number to 1 and lives to 3
	+set8im level_nr, 1
	+set8im lives, 3
; clear score
	lda #0
	sta score
	sta score+1
	sta score+2
; clear food
	sta food

; handle next level
nextlevel
	lda level_nr
	; check for level 1
	cmp #1
	beq prepare_level1
	jmp check_level2
prepare_level1
	; load data for level 1
	; now load level specific data to fix memory places and handle level
	; level tile data and tile indices, stored
	+memcopy_pages LEVEL_TILE_DATA, level1_tiledata, 2	; 0.5k = 2 pages
	; RLE decode level tile data and generate tile numbers from tile category indices
	+set16im TEMPADR0, level1_data_rle
	+set16im TEMPADR1, LEVEL_DATA
	jsr rle_decode
	jsr prepare_level_data
	; level charset	(note that we can use 234, but use and copy only 224 chars!)
	+memcopy_pages VICCHARSET, level1_chardata, 7	; 2k-1p = 7 pages = 224 chars = 56 tiles minimum
	jsr prepare_char_animations
	; level sprites - note! write at most 31 pages (7.75k), don't overwrite last page because of IRQ vectors
	+set16im TEMPADR0, level1_sprites_rle
        +set16im TEMPADR1, VICSPRITES_GAME
        jsr rle_decode
	; level specific colors
	+copy8 VICFGCOL, level1_fixcolors
	sta rasterbar_colors + 7	; store also for rasterirq, is level specific
	+copy8 VICFGCOL+1, level1_fixcolors+1
	+copy8 VICFGCOL+2, level1_fixcolors+2
	+set8im VICSPRITECOMMONCOLOR0, 0
	+set8im VICSPRITECOMMONCOLOR1, 1
	jmp ++
check_level2
	cmp #2
	beq prepare_level2
	jmp check_level3
prepare_level2
	; load data for level 2
	; tiles and sprites are the same!
	; RLE decode level tile data and generate tile numbers from tile category indices
	+set16im TEMPADR0, level2_data_rle
	+set16im TEMPADR1, LEVEL_DATA
	jsr rle_decode
	jsr prepare_level_data
	jmp ++
check_level3
	; no level number matches, so last level completed
	; jsr outtro fixme
	jmp checkhighscore
++	; run this level
	jsr run_level
	; when level returns, check if game over or lives left
	lda lives
	beq checkhighscore
	inc level_nr
	jmp nextlevel

checkhighscore
	; fixme later
	jmp startmainscreen

; --------------------- function library ----------------------


; ----------------------- wait for keypress
; Uses	A
wait_for_joy2_button
	; wait until not pressed, then pressed, then released
-	lda CIA1_DATAPORT_A
	and #$10
	beq -
-	lda CIA1_DATAPORT_A
	and #$10
	bne -
-	lda CIA1_DATAPORT_A
	and #$10
	beq -
	rts

; ----------------------- joystick port 2 check
; Uses	A, X, Y
check_joy2_state
	ldx #0
	ldy #1
	lda CIA1_DATAPORT_A
	lsr		; instead of lsr/bcs may use bit here, but would need loading of A.
	bcs +
	sty joy2_up
	stx joy2_down
	jmp ++
+	stx joy2_up
++	lsr
	bcs +
	sty joy2_down
	stx joy2_up
	jmp ++
+	stx joy2_down
++	lsr
	bcs +
	sty joy2_left
	stx joy2_right
	jmp ++
+	stx joy2_left
++	lsr
	bcs +
	sty joy2_right
	stx joy2_left
	jmp ++
+	stx joy2_right
++	lsr
	bcs +
	sty joy2_fire
	rts
+	stx joy2_fire
	rts

; -------------------- decode RLE data ---------------------
; Input	TEMPADR0	Source address of data
; Input TEMPADR1	Destination address of data
; Uses	A,X,Y
rle_decode
	ldy #0
	lda (TEMPADR0),y
	bmi rle_decode_repeat
	; No repeat or stop, just copy data that follows
	tax	; copy repeat count (copy one more than this count - we have always at least 1 data byte!)
	; Increase read address by one
	inc TEMPADR0
	bne +
	inc TEMPADR0+1
+
-	lda (TEMPADR0),y
	sta (TEMPADR1),y
	iny
	dex
	bpl -
	; now add Y to both addresses
	tya
	clc
	adc TEMPADR0
	sta TEMPADR0
	bcc +
	inc TEMPADR0+1
+
--	tya
	clc	; maybe already 0?
	adc TEMPADR1
	sta TEMPADR1
	bcc +
	inc TEMPADR1+1
+	jmp rle_decode
rle_decode_repeat
	cmp #255
	bne +
	rts	; done
+	and #$7F
	clc
	adc #3	; repeat is only chosen if at least 3 equal bytes, so count is always >= 3
	tax
	; Increase read address by one
	inc TEMPADR0
	bne +
	inc TEMPADR0+1
+	ldy #0
	lda (TEMPADR0),y
-	sta (TEMPADR1),y
	iny
	dex
	bne -
	; Increase read address by one and write address by Y
	inc TEMPADR0
	bne +
	inc TEMPADR0+1
+	jmp --

prepare_char_animations
	; read 2 chars and shift their columns with varying speeds and write
	; it to animation data area (char_animation_data)
	; chars at address VICCHARSET+ANIMATED_BGTILE_INDEX*8
	; source address is fixed, destination address varies over 512 byte,
	; so can't use register.
	; we iterate over the 16 bytes of the two chars and mask out 4 parts
	; of their data to have it as source table (64 bytes long)
	; then we only need to combine the data.
	; Then we can loop over phase counter and just add
	; the varying speeds to get the read address.
	; TEMPADR0 Table-read-address
	; TEMPADR1 Write-addres
	; TEMP0 q0
	; TEMP1 q1
	; TEMP2 Column
	; TEMP3 Phase
	; TEMP4 p
	; TEMP5 p+8
	; The table has 4*16 bytes
	; --- as first clear destination
	ldx #0
-	sta char_animation_data,x
	sta char_animation_data+$100,x
	inx
	bne -
	; --- distribute the 16 source bytes to 64byte table
	+set16im TEMPADR0, SCREEN1	; used as table
	+set8im TEMP0, $03	; AND-mask
--	ldy #0			; count 16 bytes
-	lda VICCHARSET+ANIMATED_BGTILE_INDEX*8,y
	and TEMP0
	sta (TEMPADR0),y
	iny
	cpy #16
	bne -
	lda TEMPADR0	; increase write address
	clc
	adc #16		; no overflow possible
	sta TEMPADR0
	asl TEMP0	; prepare next and-mask
	asl TEMP0
	; if its 0 now, all 4 passes are done
	bne --
	; --- set up target address
	+set16im TEMPADR1, char_animation_data
	; -- initiate column shift counters
	ldx #16
-	sta chardata_tempcolumn-1,x	; clear all shift values
	dex
	bne -
	; -- now iterate over the 32 phases
	+set8im TEMP3, 32		; nr of phases
prepare_char_animations_next_phase
	+set8im TEMP2, 4		; 4 columns
	+set8im TEMPADR0, 3*16		; table-read-adr offset init
prepare_char_animations_next_column
	ldx TEMP2			; column 4..1
	lda chardata_tempcolumn-1,x	; compute q0
	lsr
	lsr
	lsr
	and #7
	sta TEMP0			; store q0
	lda chardata_tempcolumn+4-1,x	; compute q1
	lsr
	lsr
	lsr
	and #7
	sta TEMP1			; store q1
	+set8im TEMP4, 0		; p = 0
	+set8im TEMP5, 8		; p+8 = 8
	tax				; initialize p-counter
prepare_char_animations_next_byte
	lda TEMP4			; compute q0+p
	clc
	adc TEMP0
	and #7				; (q0+p) & 7
	tay
	lda (TEMPADR0),y		; read andmask
	ldy TEMP4
	ora (TEMPADR1),y		; or-write to write address
	sta (TEMPADR1),y		; store it
	lda TEMP4
	clc
	adc TEMP1
	and #7				; (q1+p) & 7
	clc
	adc #8				; ((q1+p) & 7) + 8
	tay
	lda (TEMPADR0),y		; read andmask
	ldy TEMP5
	ora (TEMPADR1),y		; or-write to write-address+8
	sta (TEMPADR1),y		; store it
	inc TEMP4
	inc TEMP5
	dex
	bne prepare_char_animations_next_byte
	; --- next column
	lda TEMPADR0
	sec
	sbc #16
	sta TEMPADR0
	dec TEMP2
	bne prepare_char_animations_next_column
	; --- next phase
	lda TEMPADR1
	clc
	adc #16
	sta TEMPADR1
	lda TEMPADR1+1
	adc #0
	sta TEMPADR1+1
	; --- modify column shift counters
	ldx #8
-	lda chardata_tempcolumn-1,x
	clc
	adc chardata_columnshift_values-1,x
	sta chardata_tempcolumn-1,x
	dex
	bne -
	; handle phase counter
	dec TEMP3
	bne prepare_char_animations_next_phase
	rts

; ----------------------------------- includes -------------------------------

; Raster IRQ
!src "src/rasterirq.a"

; Intro
!src "src/intro.a"

; handling of main screen
!src "src/mainscreen.a"

; handling of level
!src "src/level.a"

; Actor handling
!src "src/actor.a"

; handling of blend in effect at level start
!src "src/blendin.a"

; handling of scrolling
!src "src/scrolling.a"

; ===========================================================================
; All the *** DATA ***
; ===========================================================================

; Shift per column of background animation (fixme should be level dependant!)
; level independency is the reason why we compute animations here...
chardata_columnshift_values
!byte -8, -4, -2, -4, -8, -2, -4, -2

; Text sprites (at max 64 sprites)
!src "data/textcharset_sprdata.a"

; -------------------------- data for levels ------------------------------

level1_fixcolors
!src "data/cheese_alltiles_fixcolors.a"
;!src "data/candy_alltiles_fixcolors.a"

; sprite data for level 1 packed as RLE.
; note: contains also player and player die frames (because enemies are the
; same for all levels anyway atm)
level1_sprites_rle
!src "data/level1_sprites_rle.a"

; pack level data from png as rle and store it.
; unpack directly to $B400 and replace every category number by real tile
; level gfx is paletted png to have indices directly.

; The data for a level (256 tiles horizontally, 12 tiles vertically, hence 3072 bytes).
level1_data_rle
!src "data/cheese_level1_rle.a"

; data for level2
level2_data_rle
!src "data/cheese_level2_rle.a"

; data for tiles first
!align 255, 0
level1_tiledata
!src "data/cheese_alltiles_tiledata.a"
;!src "data/candy_alltiles_tiledata.a"

; be careful - blocks with one color are coded as multicolor, gives problems with background tiles!
!align 255,0
level1_chardata
!src "data/cheese_alltiles_chardata.a"
;!src "data/candy_alltiles_chardata.a"
