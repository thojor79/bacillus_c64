; Bacillus_c64
; Copyright (C) 2016-2017  Thorsten Jordan.
; 
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

; ***************************************************************************************
;
; screen blend in / out effect
;
; ***************************************************************************************

; ----------------------------------- Blend in routine
BLEND_IN_SPRITE_PTR = 16	; first address visible screen
BLEND_IN_SPRITE = VICBANK*$4000+BLEND_IN_SPRITE_PTR*64	; must not collide with main game sprites
BLEND_IN_FIRST_LINE = 51+42-4

blend_in_init
	; save sprite multicolor and color data
	; can't use the stack - maybe zeropage or space at $0200, later,
	; here temporary data
	+copy8 blend_in_temp, $D01C
!for COUNT, 0, 7 {
	+copy8 blend_in_temp+COUNT+1, $D027+COUNT
}
	; set sprite data. Fill 4 full sprites and 12 lines (36 bytes) of fifth sprite.
	; We have to cover 192 lines (200-8) of screen. Sprite Y starts at raster line 50 (screen 51).
	; 192 lines are 96 lines of double sized sprites.
	; This is 4 full sprites (4*21=84 lines) and a half sprite (12 lines).
	; So fill 4*64 bytes with $FF and then 12 lines (36 bytes) with $FF, rest with $00
	; this means set 4*64+36 bytes to $FF and then 28 bytes to 0.
	ldx #0
	lda #$FF
-	sta BLEND_IN_SPRITE,x
	dex
	bne -
	ldx #36
	lda #$FF
-	sta BLEND_IN_SPRITE+256-1,x
	dex
	bne -
	ldx #28
	lda #$00
-	sta BLEND_IN_SPRITE+256+36-1,x
	dex
	bne -
	; set sprite data of 7 sprites
	ldx #7
-	+set8imx SCREEN0+$3F8-1, BLEND_IN_SPRITE_PTR	; sprite pointers
	+set8imx $D027-1, 0	; all sprites black color
	dex
	bne -
	; set initial positions
	ldx #50
!for COUNT, 0, 6 {
	+set8im $D000+COUNT*2, <(24+COUNT*48+7)
	stx $D001+COUNT*2
}
	lda #$60
	sta $D010
	; set hires for all sprites
	lda #$00
	sta $D01C
	; show in front of chars
	lda #$00
	sta $D01B
	; enable double size X/Y
	lda #$FF
	sta $D017
	sta $D01D
	; enable 7 sprites
	+set8im VICSPRITEENABLE, $7F
	; start blend in raster irq here!
	sei
	+set16im $FFFE, rasterirq_blend_in
	+set8im VICRASTER, BLEND_IN_FIRST_LINE
	; at end of scoreline raster irq handle final code of blend_in
	; raster irq, so overwrite address!
	+set16im rasterirq_scoreline_end+1, rasterirq_blend_in_end
	cli
	rts

; Uses TEMP0, TEMP1, TEMP2, TEMP3
blend_in_do
	; Wait for N frames, then run next animation phase
	; set frame counter.
	+set8im TEMP0, 0
blend_in_next_frame
	+set8im TEMP1, 1
--
	; wait until raster is at bottom and then back at top of screen
-	lda VICCTRL1
	bpl -
-	lda VICCTRL1
	bmi -
	inc framecounter
	jsr cycle_score_panel_colors
	dec TEMP1
	bne --

	; check next animation frame
	inc TEMP0
	lda TEMP0
	cmp #64
	bne +
	; effect done - restore sprite registers for multicolor and color
	+copy8 $D01C, blend_in_temp
!for COUNT, 0, 7 {
	+copy8 $D027+COUNT, blend_in_temp+COUNT+1
}
	; restore original jump address to scoreline raster irq!
	+set16im rasterirq_scoreline_end+1, rasterirq_ack_and_end
	rts

+	; read next frame data
	ldx TEMP0
	lda blend_in_data-1,x
	; Extract byte number and compute byte offset
	lsr
	lsr
	lsr
	lsr
	sta TEMP3	; store byte number
	asl
	clc
	adc TEMP3
	sta TEMP1	; store byte number * 3 as start offset
	; compute start address
	lda #<BLEND_IN_SPRITE
	clc
	adc TEMP1
	sta TEMPADR0
	lda #>BLEND_IN_SPRITE
	adc #0
	sta TEMPADR0+1
	; read bitnumber and create AND-mask from it
	lda blend_in_data-1,x
	and #$0F
	tay
	lda blend_in_andval,y
	sta TEMP2	; store AND-mask to set
	; now AND the mask to bytenumber + 0..2 and then to more bytes
	ldx #0
--	ldy #0
-	lda (TEMPADR0),y
	and TEMP2
	sta (TEMPADR0),y
	iny
	cpy #3
	bne -
	; increase address by offset - as first compute bytenr*16 to get address to offset table
	lda TEMP3
	asl
	asl
	asl
	asl
	clc
	adc #<blend_in_offsets
	sta blend_in_read+1
	lda #>blend_in_offsets
	adc #0
	sta blend_in_read+2
blend_in_read
	lda blend_in_offsets,x
	clc
	adc TEMPADR0
	sta TEMPADR0
	lda TEMPADR0+1
	adc #0
	sta TEMPADR0+1
	; next row of spirals, 12 total
	inx
	cpx #12
	bne --
	jmp blend_in_next_frame

; -------------------------------- IRQ routine for blend in/out sprite multiplexer
rasterirq_blend_in
	pha
	txa	; X and Y are changed, so save both
	pha
	tya
	pha
	; raster irq that is called near end of display of one row of sprites
	; Sprites have coordinates 50+42*N, N=0...4, so 50,92,134,176,218 and score line at 242.
	; And this are raster lines 51+42*N, so we need to set the sprite pointers in line 51+42*N
	; But Y coord before line 50+42*N, e.g. 49+42*N, or try 50+42*N, so we need to trigger raster at 48+42*N.
	; We trigger at 48+42*N, N=1...4 (90,132,174,216) and at 241.
	; When we arrive here, we are at end of a sprite row, we must set up next Y coordinates for next row
	; and set sprite pointers in time and then set up next IRQ.
rasterirq_blend_in_sprite_y
	lda #(50+42)
!for COUNT, 0, 6 {
	sta $D001+COUNT*2
}
	; Most timing critical is to set sprite pointer, so do that first
	; Just waiting for 50+42*N is too late, so wait for one line less and do some nops
	tay			; These commands take too long, so we need to trigger raster one line before
	dey
	ldx SCREEN0+$03F8	; load and increase sprite pointer
	inx
-	cpy VICRASTER
	bcs -
	; We are now in raster line 51+42*N, set sprite pointers
!for COUNT, 0, 6 {
	stx SCREEN0+$03F8+COUNT
}
	; Now do the less timing critical tasks, like compute next sprite y coordinate.
	lda rasterirq_blend_in_sprite_y+1
	cld
	clc
	adc #42
	; store next row position
	sta rasterirq_blend_in_sprite_y+1
	; transfer to y, -= 2 to set up next raster IRQ
	tay
	dey
	dey
	; but compare if we are already too low (218+42-2=258, so overflow, or y < 50)
	cpy #50
	bcc +
	; set IRQ for next sprite row
	dey
	sty VICRASTER
	jmp rasterirq_ack_and_end
+	; Last sprite row was set up, reset sprite Y coordinates and set up raster irq for score line
	+set8im VICRASTER, SCORE_LINE_Y-2
	+set16im $FFFE, rasterirq_scoreline
	jmp rasterirq_ack_and_end
rasterirq_blend_in_end
	; Now set IRQ vector and raster line and all data we need at end of first row.
	+set16im $FFFE, rasterirq_blend_in
	+set8im rasterirq_blend_in_sprite_y+1, 50+42
	+set8im VICRASTER, BLEND_IN_FIRST_LINE
	lda #50
	ldx #BLEND_IN_SPRITE_PTR
!for COUNT, 0, 6 {
	sta $D001+COUNT*2		; Set sprite Y coordinates back to default for first row
	stx SCREEN0+$03F8+COUNT		; Reset sprite pointers
}
	jmp rasterirq_ack_and_end

blend_in_data	; 64 frames of data
!byte $07, $06, $05, $04, $03, $02, $01, $00
!byte $10, $20, $30, $40, $50, $60, $70, $71
!byte $72, $73, $74, $75, $76, $77, $67, $57
!byte $47, $37, $27, $17, $16, $15, $14, $13
!byte $12, $11, $21, $31, $41, $51, $61, $62
!byte $63, $64, $65, $66, $56, $46, $36, $26
!byte $25, $24, $23, $22, $32, $42, $52, $53
!byte $54, $55, $45, $35, $34, $33, $43, $44

blend_in_andval
!byte 255-128, 255-64, 255-32, 255-16, 255-8, 255-4, 255-2, 255-1

blend_in_offsets	; 8 rows of 16 byte each
!byte 24, 24, 25, 24, 24, 25, 24, 25, 24, 24, 25, 0, 0, 0, 0, 0
!byte 24, 24, 25, 24, 24, 25, 24, 25, 24, 24, 25, 0, 0, 0, 0, 0
!byte 24, 24, 25, 24, 25, 24, 24, 25, 24, 24, 25, 0, 0, 0, 0, 0
!byte 24, 24, 25, 24, 25, 24, 24, 25, 24, 24, 25, 0, 0, 0, 0, 0
!byte 24, 24, 25, 24, 25, 24, 24, 25, 24, 25, 24, 0, 0, 0, 0, 0
!byte 24, 25, 24, 24, 25, 24, 24, 25, 24, 25, 24, 0, 0, 0, 0, 0
!byte 24, 25, 24, 24, 25, 24, 24, 25, 24, 25, 24, 0, 0, 0, 0, 0
!byte 24, 25, 24, 24, 25, 24, 25, 24, 24, 25, 24, 0, 0, 0, 0, 0
